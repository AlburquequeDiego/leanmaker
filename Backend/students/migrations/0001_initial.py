# Generated by Django 4.2.7 on 2025-08-19 03:24

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Estudiante",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("career", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "semester",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                ("university", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "education_level",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pendiente"),
                            ("approved", "Aprobado"),
                            ("rejected", "Rechazado"),
                            ("suspended", "Suspendido"),
                        ],
                        default="approved",
                        max_length=20,
                    ),
                ),
                (
                    "api_level",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(4),
                        ],
                    ),
                ),
                (
                    "api_level_approved_by_admin",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si el nivel API fue aprobado manualmente por admin",
                    ),
                ),
                (
                    "trl_level",
                    models.IntegerField(
                        default=1,
                        help_text="Nivel TRL del 1 al 9 según el estado del proyecto",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(9),
                        ],
                    ),
                ),
                (
                    "strikes",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "gpa",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "completed_projects",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "total_hours",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "experience_years",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                (
                    "portfolio_url",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                ("github_url", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "linkedin_url",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                ("cv_link", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "certificado_link",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "availability",
                    models.CharField(
                        choices=[
                            ("full-time", "Tiempo Completo"),
                            ("part-time", "Tiempo Parcial"),
                            ("flexible", "Flexible"),
                        ],
                        default="flexible",
                        max_length=20,
                    ),
                ),
                (
                    "hours_per_week",
                    models.IntegerField(
                        default=20,
                        help_text="Horas semanales disponibles para proyectos",
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(35),
                        ],
                    ),
                ),
                ("location", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "area",
                    models.CharField(
                        blank=True,
                        help_text="Área de interés del estudiante",
                        max_length=200,
                        null=True,
                    ),
                ),
                ("skills", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="estudiante_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Estudiante",
                "verbose_name_plural": "Estudiantes",
                "db_table": "students",
            },
        ),
        migrations.CreateModel(
            name="PerfilEstudiante",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fecha_nacimiento", models.DateField(blank=True, null=True)),
                ("genero", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "nacionalidad",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "universidad",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("facultad", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "promedio_historico",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=3, null=True
                    ),
                ),
                ("experiencia_laboral", models.TextField(blank=True, null=True)),
                ("certificaciones", models.TextField(blank=True, null=True)),
                ("proyectos_personales", models.TextField(blank=True, null=True)),
                ("tecnologias_preferidas", models.TextField(blank=True, null=True)),
                ("industrias_interes", models.TextField(blank=True, null=True)),
                ("tipo_proyectos_preferidos", models.TextField(blank=True, null=True)),
                (
                    "telefono_emergencia",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "contacto_emergencia",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "estudiante",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="perfil_detallado",
                        to="students.estudiante",
                    ),
                ),
            ],
            options={
                "verbose_name": "Perfil de Estudiante",
                "verbose_name_plural": "Perfiles de Estudiantes",
                "db_table": "student_profiles",
            },
        ),
        migrations.CreateModel(
            name="ApiLevelRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "requested_level",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(4),
                        ]
                    ),
                ),
                (
                    "current_level",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(4),
                        ]
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pendiente"),
                            ("approved", "Aprobada"),
                            ("rejected", "Rechazada"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("feedback", models.TextField(blank=True, null=True)),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_level_requests",
                        to="students.estudiante",
                    ),
                ),
            ],
            options={
                "verbose_name": "Petición de Nivel API",
                "verbose_name_plural": "Peticiones de Nivel API",
                "db_table": "api_level_requests",
                "ordering": ["-submitted_at"],
            },
        ),
    ]
