# Generated by Django 4.2.23 on 2025-07-02 01:37

from django.db import migrations, models


def create_initial_platform_settings(apps, schema_editor):
    """Crear las configuraciones iniciales de la plataforma"""
    PlatformSetting = apps.get_model('platform_settings', 'PlatformSetting')
    
    # Configuraciones de la plataforma
    settings = [
        {
            'key': 'max_strikes_student',
            'value': '3',
            'setting_type': 'INTEGER',
            'description': 'Número máximo de strikes permitidos para un estudiante antes de ser suspendido'
        },
        {
            'key': 'min_hours_project',
            'value': '20',
            'setting_type': 'INTEGER',
            'description': 'Horas mínimas requeridas para un proyecto'
        },
        {
            'key': 'max_hours_project',
            'value': '350',
            'setting_type': 'INTEGER',
            'description': 'Horas máximas permitidas para un proyecto'
        },
        {
            'key': 'default_api_level',
            'value': '1',
            'setting_type': 'INTEGER',
            'description': 'Nivel API por defecto para nuevos estudiantes'
        },
        {
            'key': 'project_approval_required',
            'value': 'false',
            'setting_type': 'BOOLEAN',
            'description': 'Si los proyectos requieren aprobación del administrador antes de ser publicados'
        },
        {
            'key': 'student_assignment_period_days',
            'value': '10',
            'setting_type': 'INTEGER',
            'description': 'Período en días para asignar estudiantes a proyectos publicados'
        },
        {
            'key': 'max_students_per_project',
            'value': '1',
            'setting_type': 'INTEGER',
            'description': 'Número máximo de estudiantes por proyecto'
        },
        {
            'key': 'platform_name',
            'value': 'LeanMaker',
            'setting_type': 'STRING',
            'description': 'Nombre de la plataforma'
        },
        {
            'key': 'platform_description',
            'value': 'Plataforma de conexión entre empresas y estudiantes para proyectos de innovación',
            'setting_type': 'STRING',
            'description': 'Descripción de la plataforma'
        },
        {
            'key': 'contact_email',
            'value': 'soporte@leanmaker.cl',
            'setting_type': 'STRING',
            'description': 'Email de contacto para soporte'
        },
        {
            'key': 'maintenance_mode',
            'value': 'false',
            'setting_type': 'BOOLEAN',
            'description': 'Si la plataforma está en modo mantenimiento'
        },
        {
            'key': 'notification_enabled',
            'value': 'true',
            'setting_type': 'BOOLEAN',
            'description': 'Si las notificaciones están habilitadas'
        },
        {
            'key': 'auto_approve_applications',
            'value': 'false',
            'setting_type': 'BOOLEAN',
            'description': 'Si las aplicaciones de estudiantes se aprueban automáticamente'
        },
        {
            'key': 'max_projects_per_company',
            'value': '10',
            'setting_type': 'INTEGER',
            'description': 'Número máximo de proyectos activos por empresa'
        },
        {
            'key': 'max_applications_per_student',
            'value': '5',
            'setting_type': 'INTEGER',
            'description': 'Número máximo de aplicaciones activas por estudiante'
        }
    ]
    
    for setting_data in settings:
        PlatformSetting.objects.create(**setting_data)


def reverse_create_initial_platform_settings(apps, schema_editor):
    """Eliminar las configuraciones iniciales"""
    PlatformSetting = apps.get_model('platform_settings', 'PlatformSetting')
    PlatformSetting.objects.all().delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='PlatformSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True, verbose_name='Clave')),
                ('value', models.TextField(verbose_name='Valor')),
                ('setting_type', models.CharField(choices=[('INTEGER', 'Número Entero'), ('FLOAT', 'Número Decimal'), ('STRING', 'Texto'), ('BOOLEAN', 'Verdadero/Falso'), ('JSON', 'JSON')], max_length=20, verbose_name='Tipo de Configuración')),
                ('description', models.TextField(blank=True, verbose_name='Descripción')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Configuración de Plataforma',
                'verbose_name_plural': 'Configuraciones de Plataforma',
                'db_table': 'platform_settings',
                'ordering': ['key'],
            },
        ),
        # Agregar los datos iniciales
        migrations.RunPython(create_initial_platform_settings, reverse_create_initial_platform_settings),
    ]
