#!/usr/bin/env python
"""
Script para verificar que el sistema LeanMaker est√© funcionando correctamente
"""
import os
import sys
import django
from django.utils import timezone

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'leanmaker_backend.settings')
django.setup()

from django.contrib.auth import get_user_model
from users.models import Usuario
from companies.models import Empresa
from students.models import Estudiante
from projects.models import Proyecto
from areas.models import Area
from trl_levels.models import TRLLevel

User = get_user_model()

def verify_system():
    print("üîç Verificando sistema LeanMaker...")
    
    # Verificar usuarios
    print("\n1Ô∏è‚É£ Verificando usuarios...")
    admin_users = User.objects.filter(is_staff=True)
    student_users = User.objects.filter(role='student')
    company_users = User.objects.filter(role='company')
    
    print(f"   ‚Ä¢ Administradores: {admin_users.count()}")
    print(f"   ‚Ä¢ Estudiantes: {student_users.count()}")
    print(f"   ‚Ä¢ Empresas: {company_users.count()}")
    
    # Verificar estudiantes
    print("\n2Ô∏è‚É£ Verificando estudiantes...")
    estudiantes = Estudiante.objects.all()
    print(f"   ‚Ä¢ Total estudiantes: {estudiantes.count()}")
    
    for estudiante in estudiantes[:3]:  # Mostrar primeros 3
        print(f"   ‚Ä¢ {estudiante.user.full_name} - {estudiante.career} (Semestre {estudiante.semester})")
    
    # Verificar empresas
    print("\n3Ô∏è‚É£ Verificando empresas...")
    empresas = Empresa.objects.all()
    print(f"   ‚Ä¢ Total empresas: {empresas.count()}")
    
    for empresa in empresas:
        print(f"   ‚Ä¢ {empresa.company_name} - {empresa.industry} ({empresa.size})")
    
    # Verificar proyectos
    print("\n4Ô∏è‚É£ Verificando proyectos...")
    proyectos = Proyecto.objects.all()
    print(f"   ‚Ä¢ Total proyectos: {proyectos.count()}")
    
    for proyecto in proyectos:
        print(f"   ‚Ä¢ {proyecto.title} - {proyecto.company.company_name}")
        print(f"     √Årea: {proyecto.area.name if proyecto.area else 'Sin √°rea'}")
        print(f"     TRL: {proyecto.trl.level if proyecto.trl else 'Sin TRL'}")
        print(f"     Estudiantes: {proyecto.current_students}/{proyecto.max_students}")
    
    # Verificar √°reas
    print("\n5Ô∏è‚É£ Verificando √°reas...")
    areas = Area.objects.all()
    print(f"   ‚Ä¢ Total √°reas: {areas.count()}")
    
    for area in areas:
        project_count = area.proyectos.count()
        print(f"   ‚Ä¢ {area.name} - {project_count} proyectos")
    
    # Verificar niveles TRL
    print("\n6Ô∏è‚É£ Verificando niveles TRL...")
    trl_levels = TRLLevel.objects.all()
    print(f"   ‚Ä¢ Total niveles TRL: {trl_levels.count()}")
    
    for trl in trl_levels:
        project_count = trl.proyectos.count()
        print(f"   ‚Ä¢ TRL {trl.level}: {trl.name} - {project_count} proyectos")
    
    # Verificar relaciones
    print("\n7Ô∏è‚É£ Verificando relaciones...")
    
    # Verificar que los estudiantes tengan usuarios asociados
    estudiantes_sin_usuario = Estudiante.objects.filter(user__isnull=True)
    if estudiantes_sin_usuario.exists():
        print(f"   ‚ö†Ô∏è  {estudiantes_sin_usuario.count()} estudiantes sin usuario asociado")
    else:
        print("   ‚úÖ Todos los estudiantes tienen usuario asociado")
    
    # Verificar que los proyectos tengan empresa asociada
    proyectos_sin_empresa = Proyecto.objects.filter(company__isnull=True)
    if proyectos_sin_empresa.exists():
        print(f"   ‚ö†Ô∏è  {proyectos_sin_empresa.count()} proyectos sin empresa asociada")
    else:
        print("   ‚úÖ Todos los proyectos tienen empresa asociada")
    
    # Verificar que los proyectos tengan √°rea asociada
    proyectos_sin_area = Proyecto.objects.filter(area__isnull=True)
    if proyectos_sin_area.exists():
        print(f"   ‚ö†Ô∏è  {proyectos_sin_area.count()} proyectos sin √°rea asociada")
    else:
        print("   ‚úÖ Todos los proyectos tienen √°rea asociada")
    
    print("\nüéâ Verificaci√≥n completada!")
    print("\nüìä Estad√≠sticas del sistema:")
    print(f"   ‚Ä¢ Usuarios totales: {User.objects.count()}")
    print(f"   ‚Ä¢ Estudiantes: {Estudiante.objects.count()}")
    print(f"   ‚Ä¢ Empresas: {Empresa.objects.count()}")
    print(f"   ‚Ä¢ Proyectos: {Proyecto.objects.count()}")
    print(f"   ‚Ä¢ √Åreas: {Area.objects.count()}")
    print(f"   ‚Ä¢ Niveles TRL: {TRLLevel.objects.count()}")

if __name__ == '__main__':
    verify_system() 