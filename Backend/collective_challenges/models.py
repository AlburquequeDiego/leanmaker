"""
üéØ MODELOS PARA DESAF√çOS COLECTIVOS

Este m√≥dulo contiene el modelo para los desaf√≠os colectivos que las empresas
pueden publicar para la academia (trimestrales/semestrales).
"""

from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from companies.models import Empresa
from areas.models import Area
from users.models import User
import uuid
import json
from django.utils import timezone


class DesafioColectivo(models.Model):
    """
    Desaf√≠os trimestrales/semestrales que las empresas publican para la academia
    """
    
    PERIOD_CHOICES = [
        ('trimestral', 'Trimestral'),
        ('semestral', 'Semestral'),
    ]
    
    STATUS_CHOICES = [
        ('draft', 'Borrador'),
        ('published', 'Publicado'),
        ('active', 'Activo'),
        ('completed', 'Completado'),
        ('cancelled', 'Cancelado'),
    ]
    
    # Campos b√°sicos
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Empresa, 
        on_delete=models.CASCADE, 
        related_name='desafios_colectivos',
        help_text="Empresa que publica el desaf√≠o"
    )
    area = models.ForeignKey(
        Area, 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True, 
        related_name='desafios_colectivos',
        help_text="√Årea tem√°tica del desaf√≠o"
    )
    
    # Informaci√≥n b√°sica del desaf√≠o
    title = models.CharField(
        max_length=200,
        help_text="T√≠tulo del desaf√≠o colectivo"
    )
    description = models.TextField(
        help_text="Descripci√≥n detallada del desaf√≠o"
    )
    requirements = models.TextField(
        help_text="Contexto completo del problema"
    )
    
    # Campos espec√≠ficos de desaf√≠os acad√©micos
    period_type = models.CharField(
        max_length=20, 
        choices=PERIOD_CHOICES, 
        default='trimestral',
        help_text="Tipo de per√≠odo acad√©mico"
    )
    academic_year = models.CharField(
        max_length=10,
        help_text="A√±o acad√©mico (ej: 2024)"
    )
    
    # Campos de informaci√≥n detallada
    objetivo = models.TextField(
        blank=True, 
        null=True,
        help_text="Criterios de evaluaci√≥n"
    )
    tipo = models.CharField(
        max_length=200, 
        blank=True, 
        null=True,
        help_text="Recursos disponibles"
    )
    contacto = models.CharField(
        max_length=200, 
        blank=True, 
        null=True,
        help_text="Informaci√≥n de contacto"
    )
    
    # Campos JSON para habilidades y tecnolog√≠as
    required_skills = models.TextField(
        null=True, 
        blank=True,
        help_text="Habilidades requeridas (JSON array)"
    )
    technologies = models.TextField(
        null=True, 
        blank=True,
        help_text="Tecnolog√≠as a utilizar (JSON array)"
    )
    benefits = models.TextField(
        null=True, 
        blank=True,
        help_text="Beneficios para los participantes (JSON array)"
    )
    
    # Estado y m√©tricas
    status = models.CharField(
        max_length=20, 
        choices=STATUS_CHOICES, 
        default='draft',
        help_text="Estado actual del desaf√≠o"
    )
    applications_count = models.IntegerField(
        default=0,
        help_text="N√∫mero de aplicaciones recibidas"
    )
    views_count = models.IntegerField(
        default=0,
        help_text="N√∫mero de visualizaciones"
    )
    
    # Campos de configuraci√≥n
    is_featured = models.BooleanField(
        default=False,
        help_text="Si el desaf√≠o est√° destacado"
    )
    is_urgent = models.BooleanField(
        default=False,
        help_text="Si el desaf√≠o es urgente"
    )
    is_active = models.BooleanField(
        default=True,
        help_text="Si el desaf√≠o est√° activo"
    )
    
    # Campos de fechas de auditor√≠a
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    published_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        db_table = 'collective_challenges'
        verbose_name = 'Desaf√≠o Colectivo'
        verbose_name_plural = 'Desaf√≠os Colectivos'
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.title} - {self.company.company_name} ({self.get_period_type_display()})"
    
    def get_required_skills_list(self):
        """Obtiene la lista de habilidades requeridas como lista de Python"""
        if self.required_skills:
            try:
                return json.loads(self.required_skills)
            except json.JSONDecodeError:
                return []
        return []
    
    def set_required_skills_list(self, skills_list):
        """Establece la lista de habilidades requeridas desde una lista de Python"""
        if isinstance(skills_list, list):
            self.required_skills = json.dumps(skills_list, ensure_ascii=False)
        else:
            self.required_skills = None
    
    def get_technologies_list(self):
        """Obtiene la lista de tecnolog√≠as como lista de Python"""
        if self.technologies:
            try:
                return json.loads(self.technologies)
            except json.JSONDecodeError:
                return []
        return []
    
    def set_technologies_list(self, technologies_list):
        """Establece la lista de tecnolog√≠as desde una lista de Python"""
        if isinstance(technologies_list, list):
            self.technologies = json.dumps(technologies_list, ensure_ascii=False)
        else:
            self.technologies = None
    
    def get_benefits_list(self):
        """Obtiene la lista de beneficios como lista de Python"""
        if self.benefits:
            try:
                return json.loads(self.benefits)
            except json.JSONDecodeError:
                return []
        return []
    
    def set_benefits_list(self, benefits_list):
        """Establece la lista de beneficios desde una lista de Python"""
        if isinstance(benefits_list, list):
            self.benefits = json.dumps(benefits_list, ensure_ascii=False)
        else:
            self.benefits = None