# Generated by Django 4.2.7 on 2025-09-13 09:48

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("students", "0002_estudiante_rut_estudiante_section"),
        (
            "collective_challenges",
            "0002_remove_desafiocolectivo_challenge_end_and_more",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="ChallengeArea",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nombre del área de desafío",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Descripción del área", null=True
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff", help_text="Color hexadecimal", max_length=7
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True, help_text="Icono del área", max_length=50, null=True
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Área de Desafío",
                "verbose_name_plural": "Áreas de Desafíos",
                "db_table": "challenge_areas",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TeacherSection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "section_name",
                    models.CharField(
                        help_text="Nombre de la sección/clase", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Descripción de la sección", null=True
                    ),
                ),
                (
                    "period_type",
                    models.CharField(
                        choices=[
                            ("trimestral", "Trimestral"),
                            ("semestral", "Semestral"),
                        ],
                        default="trimestral",
                        max_length=20,
                    ),
                ),
                (
                    "academic_year",
                    models.CharField(help_text="Año académico", max_length=10),
                ),
                (
                    "semester",
                    models.CharField(help_text="Semestre o trimestre", max_length=20),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("registration_deadline", models.DateField(blank=True, null=True)),
                (
                    "max_students",
                    models.PositiveIntegerField(
                        default=30, help_text="Máximo número de estudiantes"
                    ),
                ),
                (
                    "max_groups",
                    models.PositiveIntegerField(
                        default=5, help_text="Máximo número de grupos"
                    ),
                ),
                (
                    "students_per_group",
                    models.PositiveIntegerField(
                        default=6, help_text="Estudiantes por grupo"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planning", "Planificación"),
                            ("active", "Activo"),
                            ("completed", "Completado"),
                            ("cancelled", "Cancelado"),
                        ],
                        default="planning",
                        max_length=20,
                    ),
                ),
                ("enrolled_students_count", models.PositiveIntegerField(default=0)),
                ("active_groups_count", models.PositiveIntegerField(default=0)),
                (
                    "allow_individual_participation",
                    models.BooleanField(
                        default=True,
                        help_text="Permitir participación individual además de grupal",
                    ),
                ),
                (
                    "auto_assign_groups",
                    models.BooleanField(
                        default=False, help_text="Asignación automática de grupos"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_sections",
                        to="collective_challenges.desafiocolectivo",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        limit_choices_to={"role": "teacher"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_sections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Sección de Profesor",
                "verbose_name_plural": "Secciones de Profesores",
                "db_table": "teacher_sections",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "group_name",
                    models.CharField(help_text="Nombre del grupo", max_length=200),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Descripción del grupo", null=True
                    ),
                ),
                (
                    "max_members",
                    models.PositiveIntegerField(
                        default=6, help_text="Máximo número de miembros"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("forming", "Formándose"),
                            ("active", "Activo"),
                            ("completed", "Completado"),
                            ("disbanded", "Disuelto"),
                        ],
                        default="forming",
                        max_length=20,
                    ),
                ),
                ("members_count", models.PositiveIntegerField(default=0)),
                (
                    "progress_percentage",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("formed_date", models.DateTimeField(auto_now_add=True)),
                ("completed_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "section",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_groups",
                        to="collective_challenges.teachersection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Grupo de Estudiantes",
                "verbose_name_plural": "Grupos de Estudiantes",
                "db_table": "student_groups",
                "ordering": ["section", "group_name"],
            },
        ),
        migrations.CreateModel(
            name="GroupMembership",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("member", "Miembro"),
                            ("leader", "Líder"),
                            ("co_leader", "Co-Líder"),
                        ],
                        default="member",
                        max_length=20,
                    ),
                ),
                ("joined_date", models.DateTimeField(auto_now_add=True)),
                ("left_date", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="collective_challenges.studentgroup",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_memberships",
                        to="students.estudiante",
                    ),
                ),
            ],
            options={
                "verbose_name": "Membresía de Grupo",
                "verbose_name_plural": "Membresías de Grupos",
                "db_table": "group_memberships",
                "unique_together": {("group", "student")},
            },
        ),
        migrations.CreateModel(
            name="ChallengeQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("trl_1", "TRL 1 - Concepto Básico"),
                            ("trl_2", "TRL 2 - Concepto Formulado"),
                            ("trl_3", "TRL 3 - Prueba de Concepto"),
                            ("trl_4", "TRL 4 - Validación en Laboratorio"),
                            ("trl_5", "TRL 5 - Validación en Ambiente Relevante"),
                            ("trl_6", "TRL 6 - Demostración en Ambiente Relevante"),
                            ("trl_7", "TRL 7 - Demostración en Ambiente Operacional"),
                            ("trl_8", "TRL 8 - Sistema Completo y Calificado"),
                            (
                                "trl_9",
                                "TRL 9 - Sistema Probado en Ambiente Operacional",
                            ),
                        ],
                        help_text="Tipo de pregunta TRL",
                        max_length=10,
                    ),
                ),
                (
                    "evaluation_type",
                    models.CharField(
                        choices=[
                            ("multiple_choice", "Opción Múltiple"),
                            ("text", "Texto Libre"),
                            ("scale", "Escala"),
                            ("file", "Archivo"),
                            ("mixed", "Mixto"),
                        ],
                        default="text",
                        max_length=20,
                    ),
                ),
                ("question_text", models.TextField(help_text="Texto de la pregunta")),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Descripción adicional", null=True
                    ),
                ),
                (
                    "max_score",
                    models.FloatField(
                        default=5.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "weight",
                    models.FloatField(
                        default=1.0,
                        help_text="Peso de la pregunta en la evaluación total",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "options",
                    models.TextField(
                        blank=True,
                        help_text="Opciones de respuesta (JSON array)",
                        null=True,
                    ),
                ),
                (
                    "evaluation_criteria",
                    models.TextField(
                        blank=True,
                        help_text="Criterios de evaluación (JSON)",
                        null=True,
                    ),
                ),
                ("is_required", models.BooleanField(default=True)),
                ("order", models.PositiveIntegerField(default=1)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="collective_challenges.desafiocolectivo",
                    ),
                ),
                (
                    "challenge_area",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="questions",
                        to="collective_challenges.challengearea",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pregunta de Desafío",
                "verbose_name_plural": "Preguntas de Desafíos",
                "db_table": "challenge_questions",
                "ordering": ["challenge", "order"],
                "unique_together": {("challenge", "question_type")},
            },
        ),
        migrations.CreateModel(
            name="ChallengeProgress",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "trl_1_progress",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "trl_2_progress",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "trl_3_progress",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "trl_4_progress",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "trl_5_progress",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "trl_6_progress",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "trl_7_progress",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "trl_8_progress",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "trl_9_progress",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "overall_progress",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "No Iniciado"),
                            ("in_progress", "En Progreso"),
                            ("completed", "Completado"),
                            ("needs_review", "Necesita Revisión"),
                            ("approved", "Aprobado"),
                            ("rejected", "Rechazado"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                (
                    "current_grade",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "final_grade",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "responses_data",
                    models.TextField(
                        blank=True,
                        help_text="Respuestas a las preguntas TRL (JSON)",
                        null=True,
                    ),
                ),
                (
                    "teacher_feedback",
                    models.TextField(
                        blank=True, help_text="Feedback general del profesor", null=True
                    ),
                ),
                (
                    "evaluation_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notas de evaluación del profesor",
                        null=True,
                    ),
                ),
                ("started_date", models.DateTimeField(blank=True, null=True)),
                ("last_activity_date", models.DateTimeField(blank=True, null=True)),
                ("completed_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_progress",
                        to="collective_challenges.desafiocolectivo",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="group_progress",
                        to="collective_challenges.studentgroup",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_progress",
                        to="collective_challenges.teachersection",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenge_progress",
                        to="students.estudiante",
                    ),
                ),
            ],
            options={
                "verbose_name": "Progreso de Desafío",
                "verbose_name_plural": "Progresos de Desafíos",
                "db_table": "challenge_progress",
                "ordering": ["-last_activity_date"],
                "unique_together": {("student", "challenge", "section")},
            },
        ),
    ]
