#!/usr/bin/env python3
"""
Script para crear datos de prueba para LeanMaker
Basado en los datos del archivo de conexiones
"""

import os
import sys
import django
from pathlib import Path
from django.contrib.auth import get_user_model
from django.core.management import call_command

# Configurar Django con configuraci√≥n local
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings_local')
django.setup()

User = get_user_model()

def create_admin_user():
    """Crear usuario administrador"""
    try:
        admin_user = User.objects.create_user(
            username='admin@leanmaker.com',
            email='admin@leanmaker.com',
            password='Admin123!',
            first_name='Laura',
            last_name='Mart√≠nez',
            is_staff=True,
            is_superuser=True
        )
        print(f"‚úÖ Admin creado: {admin_user.email}")
        return admin_user
    except Exception as e:
        print(f"‚ö†Ô∏è Admin ya existe o error: {e}")
        return User.objects.get(email='admin@leanmaker.com')

def create_student_users():
    """Crear usuarios estudiantes"""
    students_data = [
        ('diego.alburqueque@inacapmail.cl', 'Diego', 'Alburqueque'),
        ('joaquin@inacapmail.cl', 'Joaqu√≠n', 'Estudiante'),
        ('juan.perez@uchile.cl', 'Juan', 'P√©rez'),
        ('camila.rojas@inacapmail.cl', 'Camila', 'Rojas'),
        ('matias.contreras@inacapmail.cl', 'Mat√≠as', 'Contreras'),
        ('fernanda.torres@inacapmail.cl', 'Fernanda', 'Torres'),
        ('melisa.colana@uchile.cl', 'Melisa', 'Colana'),
        ('diego.fariaz@uchile.cl', 'Diego', 'Fariaz'),
        ('loreto.alburqueque@uchile.cl', 'Loreto', 'Alburqueque'),
        ('soledad.garay@inacapmail.cl', 'Soledad', 'Garay'),
    ]
    
    created_students = []
    for email, first_name, last_name in students_data:
        try:
            user = User.objects.create_user(
                username=email,
                email=email,
                password='Estudiante123!',
                first_name=first_name,
                last_name=last_name,
                user_type='student'
            )
            created_students.append(user)
            print(f"‚úÖ Estudiante creado: {user.email}")
        except Exception as e:
            print(f"‚ö†Ô∏è Estudiante ya existe: {email}")
    
    return created_students

def create_company_users():
    """Crear usuarios de empresa"""
    companies_data = [
        ('informatica@contrucciones.cL', 'Inform√°tica', 'Construcciones'),
        ('camila.rios@empresa.cl', 'Camila', 'R√≠os'),
        ('martin.herrera@correo.cl', 'Mart√≠n', 'Herrera'),
        ('fernandasoto@empresa.com', 'Fernanda', 'Soto'),
        ('jorge.alarcon@correo.cl', 'Jorge', 'Alarc√≥n'),
        ('valespinoza@empresa.cl', 'Valentina', 'Espinoza'),
        ('nico.mendez@correo.cl', 'Nicol√°s', 'M√©ndez'),
        ('avargas@empresa.com', 'Ana', 'Vargas'),
        ('diego.morales@correo.cl', 'Diego', 'Morales'),
        ('isileon@empresa.cl', 'Isabella', 'Le√≥n'),
    ]
    
    created_companies = []
    for email, first_name, last_name in companies_data:
        try:
            user = User.objects.create_user(
                username=email,
                email=email,
                password='Empresa123!',
                first_name=first_name,
                last_name=last_name,
                user_type='company'
            )
            created_companies.append(user)
            print(f"‚úÖ Empresa creada: {user.email}")
        except Exception as e:
            print(f"‚ö†Ô∏è Empresa ya existe: {email}")
    
    return created_companies

def create_sample_companies():
    """Crear empresas de ejemplo"""
    try:
        from companies.models import Company
        
        companies = [
            {
                'name': 'Construcciones Inform√°ticas S.A.',
                'description': 'Empresa l√≠der en construcci√≥n y tecnolog√≠a',
                'industry': 'Construcci√≥n',
                'size': 'medium',
                'website': 'https://construcciones.cl',
                'phone': '+56 2 2345 6789',
                'address': 'Av. Providencia 1234, Santiago'
            },
            {
                'name': 'Tech Solutions Ltda.',
                'description': 'Soluciones tecnol√≥gicas innovadoras',
                'industry': 'Tecnolog√≠a',
                'size': 'small',
                'website': 'https://techsolutions.cl',
                'phone': '+56 2 3456 7890',
                'address': 'Av. Las Condes 567, Santiago'
            },
            {
                'name': 'Innovaci√≥n Digital SPA',
                'description': 'Transformaci√≥n digital para empresas',
                'industry': 'Consultor√≠a',
                'size': 'large',
                'website': 'https://innovaciondigital.cl',
                'phone': '+56 2 4567 8901',
                'address': 'Av. Apoquindo 890, Santiago'
            }
        ]
        
        created_companies = []
        for company_data in companies:
            company, created = Company.objects.get_or_create(
                name=company_data['name'],
                defaults=company_data
            )
            if created:
                print(f"‚úÖ Empresa creada: {company.name}")
            else:
                print(f"‚ö†Ô∏è Empresa ya existe: {company.name}")
            created_companies.append(company)
        
        return created_companies
    except Exception as e:
        print(f"‚ö†Ô∏è Error creando empresas: {e}")
        return []

def create_sample_projects():
    """Crear proyectos de ejemplo"""
    try:
        from projects.models import Project
        from companies.models import Company
        
        companies = Company.objects.all()
        if not companies.exists():
            print("‚ö†Ô∏è No hay empresas disponibles para crear proyectos")
            return []
        
        projects_data = [
            {
                'title': 'Sistema de Gesti√≥n de Construcci√≥n',
                'description': 'Desarrollo de software para gesti√≥n de proyectos de construcci√≥n',
                'required_api_level': 3,
                'required_trl_level': 6,
                'students_needed': 3,
                'hours_offered': 240,
                'location': 'Santiago, Chile',
                'status': 'active'
            },
            {
                'title': 'Aplicaci√≥n M√≥vil para Delivery',
                'description': 'Creaci√≥n de app m√≥vil para servicio de delivery',
                'required_api_level': 2,
                'required_trl_level': 5,
                'students_needed': 2,
                'hours_offered': 180,
                'location': 'Valpara√≠so, Chile',
                'status': 'active'
            },
            {
                'title': 'Plataforma de E-learning',
                'description': 'Desarrollo de plataforma educativa online',
                'required_api_level': 4,
                'required_trl_level': 7,
                'students_needed': 4,
                'hours_offered': 320,
                'location': 'Concepci√≥n, Chile',
                'status': 'active'
            },
            {
                'title': 'Sistema de Inventario Inteligente',
                'description': 'Sistema de gesti√≥n de inventario con IA',
                'required_api_level': 3,
                'required_trl_level': 6,
                'students_needed': 2,
                'hours_offered': 200,
                'location': 'La Serena, Chile',
                'status': 'active'
            }
        ]
        
        created_projects = []
        for i, project_data in enumerate(projects_data):
            company = companies[i % len(companies)]
            project, created = Project.objects.get_or_create(
                title=project_data['title'],
                defaults={
                    **project_data,
                    'company': company
                }
            )
            if created:
                print(f"‚úÖ Proyecto creado: {project.title}")
            else:
                print(f"‚ö†Ô∏è Proyecto ya existe: {project.title}")
            created_projects.append(project)
        
        return created_projects
    except Exception as e:
        print(f"‚ö†Ô∏è Error creando proyectos: {e}")
        return []

def main():
    """Funci√≥n principal"""
    print("=" * 60)
    print("üéØ CREANDO DATOS DE PRUEBA PARA LEANMAKER")
    print("=" * 60)
    
    # Verificar que existe la configuraci√≥n local
    if not Path('core/settings_local.py').exists():
        print("‚ùå Error: No se encontr√≥ core/settings_local.py")
        print("Ejecuta primero: python setup_local.py")
        return
    
    # Verificar que existe la base de datos local
    if not Path('db.sqlite3').exists():
        print("‚ùå Error: No se encontr√≥ db.sqlite3")
        print("Ejecuta primero: python setup_local.py")
        return
    
    print("\nüë§ Creando usuarios...")
    admin = create_admin_user()
    students = create_student_users()
    companies = create_company_users()
    
    print("\nüè¢ Creando empresas...")
    sample_companies = create_sample_companies()
    
    print("\nüìã Creando proyectos...")
    projects = create_sample_projects()
    
    print("\n" + "=" * 60)
    print("üéâ ¬°DATOS DE PRUEBA CREADOS EXITOSAMENTE!")
    print("=" * 60)
    print(f"\nüìä Resumen:")
    print(f"   - Admin: 1 usuario")
    print(f"   - Estudiantes: {len(students)} usuarios")
    print(f"   - Empresas: {len(companies)} usuarios")
    print(f"   - Empresas de muestra: {len(sample_companies)}")
    print(f"   - Proyectos: {len(projects)}")
    
    print(f"\nüîë Credenciales de acceso:")
    print(f"   - Admin: admin@leanmaker.com / Admin123!")
    print(f"   - Estudiante: diego.alburqueque@inacapmail.cl / Estudiante123!")
    print(f"   - Empresa: informatica@contrucciones.cL / Empresa123!")
    
    print(f"\nüåê URLs:")
    print(f"   - Admin: http://localhost:8000/admin")
    print(f"   - Frontend: http://localhost:5173")
    
    print(f"\nüí° Ahora puedes:")
    print(f"   1. Iniciar el servidor: python manage.py runserver --settings=core.settings_local")
    print(f"   2. Acceder al admin con las credenciales")
    print(f"   3. Probar la funcionalidad completa del sistema")

if __name__ == "__main__":
    main() 