# Generated by Django 4.2.23 on 2025-07-02 01:37

from django.db import migrations


def create_all_initial_data(apps, schema_editor):
    """Crear todos los datos iniciales necesarios"""
    
    # Estados de proyectos
    ProjectStatus = apps.get_model('project_status', 'ProjectStatus')
    if not ProjectStatus.objects.exists():
        statuses = [
            {'name': 'published', 'description': 'El proyecto está publicado y visible para los estudiantes', 'color': '#1976d2'},
            {'name': 'active', 'description': 'El proyecto está en curso y los estudiantes están trabajando en él', 'color': '#388e3c'},
            {'name': 'completed', 'description': 'El proyecto ha sido finalizado exitosamente', 'color': '#fbc02d'},
            {'name': 'deleted', 'description': 'El proyecto ha sido eliminado', 'color': '#d32f2f'},
            {'name': 'draft', 'description': 'El proyecto está en borrador', 'color': '#757575'}
        ]
        for status_data in statuses:
            ProjectStatus.objects.create(**status_data)
    
    # Áreas
    Area = apps.get_model('areas', 'Area')
    if not Area.objects.exists():
        areas = [
            {'name': 'Tecnología y Sistemas', 'description': 'Proyectos relacionados con desarrollo de software, sistemas informáticos, aplicaciones móviles, web, etc.', 'color': '#2196F3', 'icon': 'computer'},
            {'name': 'Administración y Gestión', 'description': 'Proyectos de administración de empresas, gestión de recursos, finanzas, marketing, etc.', 'color': '#4CAF50', 'icon': 'business'},
            {'name': 'Comunicación y Marketing', 'description': 'Proyectos de comunicación, publicidad, marketing digital, redes sociales, etc.', 'color': '#FF9800', 'icon': 'campaign'},
            {'name': 'Salud y Ciencias', 'description': 'Proyectos relacionados con ciencias de la salud, investigación médica, biotecnología, etc.', 'color': '#E91E63', 'icon': 'health_and_safety'},
            {'name': 'Ingeniería y Construcción', 'description': 'Proyectos de ingeniería civil, construcción, arquitectura, diseño estructural, etc.', 'color': '#795548', 'icon': 'engineering'},
            {'name': 'Educación y Formación', 'description': 'Proyectos educativos, desarrollo de contenido, plataformas de aprendizaje, etc.', 'color': '#9C27B0', 'icon': 'school'},
            {'name': 'Arte y Diseño', 'description': 'Proyectos de diseño gráfico, artes visuales, diseño industrial, multimedia, etc.', 'color': '#F44336', 'icon': 'palette'},
            {'name': 'Investigación y Desarrollo', 'description': 'Proyectos de investigación científica, desarrollo de nuevas tecnologías, innovación, etc.', 'color': '#607D8B', 'icon': 'science'},
            {'name': 'Servicios y Atención al Cliente', 'description': 'Proyectos de mejora de servicios, atención al cliente, experiencia de usuario, etc.', 'color': '#00BCD4', 'icon': 'support_agent'},
            {'name': 'Sostenibilidad y Medio Ambiente', 'description': 'Proyectos relacionados con medio ambiente, sostenibilidad, energías renovables, etc.', 'color': '#8BC34A', 'icon': 'eco'},
            {'name': 'Otro', 'description': 'Otras áreas de conocimiento no categorizadas', 'color': '#9E9E9E', 'icon': 'more_horiz'}
        ]
        for area_data in areas:
            Area.objects.create(**area_data)
    
    # Niveles TRL
    TRLLevel = apps.get_model('trl_levels', 'TRLLevel')
    if not TRLLevel.objects.exists():
        trl_levels = [
            {'level': 1, 'name': 'TRL 1 - Principios básicos observados', 'description': 'Fase de idea, sin definición clara ni desarrollo previo. Investigación científica básica.', 'min_hours': 20},
            {'level': 2, 'name': 'TRL 2 - Concepto tecnológico formulado', 'description': 'Definición clara y antecedentes de lo que se desea desarrollar. Investigación aplicada.', 'min_hours': 20},
            {'level': 3, 'name': 'TRL 3 - Prueba de concepto analítica y experimental', 'description': 'Pruebas y validaciones de concepto. Componentes evaluados por separado.', 'min_hours': 40},
            {'level': 4, 'name': 'TRL 4 - Validación en laboratorio', 'description': 'Prototipo mínimo viable probado en condiciones controladas simples.', 'min_hours': 40},
            {'level': 5, 'name': 'TRL 5 - Validación en entorno relevante', 'description': 'Prototipo mínimo viable probado en condiciones similares al entorno real.', 'min_hours': 80},
            {'level': 6, 'name': 'TRL 6 - Demostración en entorno relevante', 'description': 'Prototipo probado mediante un piloto en condiciones reales.', 'min_hours': 80},
            {'level': 7, 'name': 'TRL 7 - Demostración en entorno operativo', 'description': 'Desarrollo probado en condiciones reales, por un periodo prolongado.', 'min_hours': 160},
            {'level': 8, 'name': 'TRL 8 - Sistema completo y calificado', 'description': 'Producto validado en lo técnico y lo comercial.', 'min_hours': 160},
            {'level': 9, 'name': 'TRL 9 - Sistema probado en operación exitosa', 'description': 'Producto completamente desarrollado y disponible para la sociedad.', 'min_hours': 160}
        ]
        for trl_data in trl_levels:
            TRLLevel.objects.create(**trl_data)
    
    # Configuraciones de plataforma
    PlatformSetting = apps.get_model('platform_settings', 'PlatformSetting')
    if not PlatformSetting.objects.exists():
        settings = [
            {'key': 'max_strikes_student', 'value': '3', 'setting_type': 'INTEGER', 'description': 'Número máximo de strikes permitidos para un estudiante antes de ser suspendido'},
            {'key': 'min_hours_project', 'value': '20', 'setting_type': 'INTEGER', 'description': 'Horas mínimas requeridas para un proyecto'},
            {'key': 'max_hours_project', 'value': '350', 'setting_type': 'INTEGER', 'description': 'Horas máximas permitidas para un proyecto'},
            {'key': 'default_api_level', 'value': '1', 'setting_type': 'INTEGER', 'description': 'Nivel API por defecto para nuevos estudiantes'},
            {'key': 'project_approval_required', 'value': 'false', 'setting_type': 'BOOLEAN', 'description': 'Si los proyectos requieren aprobación del administrador antes de ser publicados'},
            {'key': 'student_assignment_period_days', 'value': '10', 'setting_type': 'INTEGER', 'description': 'Período en días para asignar estudiantes a proyectos publicados'},
            {'key': 'max_students_per_project', 'value': '1', 'setting_type': 'INTEGER', 'description': 'Número máximo de estudiantes por proyecto'},
            {'key': 'platform_name', 'value': 'LeanMaker', 'setting_type': 'STRING', 'description': 'Nombre de la plataforma'},
            {'key': 'platform_description', 'value': 'Plataforma de conexión entre empresas y estudiantes para proyectos de innovación', 'setting_type': 'STRING', 'description': 'Descripción de la plataforma'},
            {'key': 'contact_email', 'value': 'soporte@leanmaker.cl', 'setting_type': 'STRING', 'description': 'Email de contacto para soporte'},
            {'key': 'maintenance_mode', 'value': 'false', 'setting_type': 'BOOLEAN', 'description': 'Si la plataforma está en modo mantenimiento'},
            {'key': 'notification_enabled', 'value': 'true', 'setting_type': 'BOOLEAN', 'description': 'Si las notificaciones están habilitadas'},
            {'key': 'auto_approve_applications', 'value': 'false', 'setting_type': 'BOOLEAN', 'description': 'Si las aplicaciones de estudiantes se aprueban automáticamente'},
            {'key': 'max_projects_per_company', 'value': '10', 'setting_type': 'INTEGER', 'description': 'Número máximo de proyectos activos por empresa'},
            {'key': 'max_applications_per_student', 'value': '5', 'setting_type': 'INTEGER', 'description': 'Número máximo de aplicaciones activas por estudiante'}
        ]
        for setting_data in settings:
            PlatformSetting.objects.create(**setting_data)
    
    # Categorías de evaluación
    EvaluationCategory = apps.get_model('evaluation_categories', 'EvaluationCategory')
    if not EvaluationCategory.objects.exists():
        categories = [
            {'name': 'Habilidades Técnicas', 'description': 'Evaluación de conocimientos técnicos y habilidades específicas del área'},
            {'name': 'Habilidades Blandas', 'description': 'Evaluación de comunicación, trabajo en equipo, liderazgo y adaptabilidad'},
            {'name': 'Calidad del Trabajo', 'description': 'Evaluación de la calidad, precisión y atención al detalle en el trabajo realizado'},
            {'name': 'Cumplimiento de Plazos', 'description': 'Evaluación de la puntualidad y cumplimiento de fechas de entrega'},
            {'name': 'Iniciativa y Proactividad', 'description': 'Evaluación de la capacidad de tomar iniciativa y ser proactivo en el proyecto'},
            {'name': 'Resolución de Problemas', 'description': 'Evaluación de la capacidad para identificar y resolver problemas de manera efectiva'},
            {'name': 'Aprendizaje y Adaptación', 'description': 'Evaluación de la capacidad de aprender nuevas tecnologías y adaptarse a cambios'},
            {'name': 'Responsabilidad', 'description': 'Evaluación de la responsabilidad y compromiso con el proyecto'}
        ]
        for category_data in categories:
            EvaluationCategory.objects.create(**category_data)


def reverse_create_all_initial_data(apps, schema_editor):
    """Eliminar todos los datos iniciales"""
    ProjectStatus = apps.get_model('project_status', 'ProjectStatus')
    Area = apps.get_model('areas', 'Area')
    TRLLevel = apps.get_model('trl_levels', 'TRLLevel')
    PlatformSetting = apps.get_model('platform_settings', 'PlatformSetting')
    EvaluationCategory = apps.get_model('evaluation_categories', 'EvaluationCategory')
    
    ProjectStatus.objects.all().delete()
    Area.objects.all().delete()
    TRLLevel.objects.all().delete()
    PlatformSetting.objects.all().delete()
    EvaluationCategory.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('project_status', '0003_initial'),
        ('areas', '0001_initial'),
        ('trl_levels', '0001_initial'),
        ('platform_settings', '0001_initial'),
        ('evaluation_categories', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_all_initial_data, reverse_create_all_initial_data),
    ]
