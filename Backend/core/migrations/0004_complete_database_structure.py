# Generated by Django 4.2.7 on 2025-01-15 10:00:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0003_initial_data'),
    ]

    operations = [
        # ===== ACTUALIZACIONES DE USUARIOS =====
        migrations.AlterField(
            model_name='user',
            name='email',
            field=models.EmailField(max_length=254, unique=True, verbose_name='email address'),
        ),
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),
        ),
        
        # ===== ACTUALIZACIONES DE CALENDAR EVENTS =====
        migrations.AddField(
            model_name='calendarevent',
            name='room',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='Sala'),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='duration',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Duración'),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='meeting_type',
            field=models.CharField(blank=True, choices=[('online', 'Online'), ('cowork', 'Cowork'), ('fablab', 'FabLab')], max_length=10, null=True, verbose_name='Tipo de reunión'),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='meeting_link',
            field=models.URLField(blank=True, null=True, verbose_name='Link de reunión'),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='meeting_room',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Sala de reunión'),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='representative_name',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='Nombre del representante'),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='representative_position',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='Cargo del representante'),
        ),
        
        # ===== ACTUALIZACIONES DE STUDENTS =====
        migrations.AddField(
            model_name='estudiante',
            name='university',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Universidad'),
        ),
        migrations.AddField(
            model_name='estudiante',
            name='education_level',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Nivel de educación'),
        ),
        migrations.AddField(
            model_name='estudiante',
            name='cv_link',
            field=models.CharField(blank=True, max_length=500, null=True, verbose_name='Link del CV'),
        ),
        migrations.AddField(
            model_name='estudiante',
            name='certificado_link',
            field=models.CharField(blank=True, max_length=500, null=True, verbose_name='Link del certificado'),
        ),
        migrations.AddField(
            model_name='estudiante',
            name='bio',
            field=models.TextField(blank=True, null=True, verbose_name='Biografía'),
        ),
        
        # ===== ACTUALIZACIONES DE PROJECTS =====
        migrations.AddField(
            model_name='proyecto',
            name='requirements',
            field=models.TextField(blank=True, null=True, verbose_name='Requisitos'),
        ),
        migrations.AddField(
            model_name='proyecto',
            name='tipo',
            field=models.CharField(blank=True, help_text='Tipo de actividad del proyecto', max_length=100, null=True, verbose_name='Tipo'),
        ),
        migrations.AddField(
            model_name='proyecto',
            name='objetivo',
            field=models.TextField(blank=True, help_text='Objetivo del proyecto', null=True, verbose_name='Objetivo'),
        ),
        migrations.AddField(
            model_name='proyecto',
            name='encargado',
            field=models.CharField(blank=True, help_text='Responsable del proyecto de la empresa', max_length=200, null=True, verbose_name='Encargado'),
        ),
        migrations.AddField(
            model_name='proyecto',
            name='contacto',
            field=models.CharField(blank=True, help_text='Contacto de la empresa', max_length=200, null=True, verbose_name='Contacto'),
        ),
        migrations.AddField(
            model_name='proyecto',
            name='duration_weeks',
            field=models.IntegerField(default=12, verbose_name='Duración en semanas'),
        ),
        migrations.AddField(
            model_name='proyecto',
            name='application_deadline',
            field=models.DateField(blank=True, null=True, verbose_name='Fecha límite de aplicación'),
        ),
        migrations.AddField(
            model_name='proyecto',
            name='technologies',
            field=models.TextField(blank=True, null=True, verbose_name='Tecnologías'),
        ),
        migrations.AddField(
            model_name='proyecto',
            name='benefits',
            field=models.TextField(blank=True, null=True, verbose_name='Beneficios'),
        ),
        
        # ===== ACTUALIZACIONES DE EVALUATIONS =====
        migrations.AddField(
            model_name='evaluation',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='evaluation_categories.evaluationcategory', verbose_name='Categoría'),
        ),
        migrations.AddField(
            model_name='evaluation',
            name='evaluation_date',
            field=models.DateField(auto_now_add=True, verbose_name='Fecha de evaluación'),
        ),
        migrations.AlterField(
            model_name='evaluation',
            name='score',
            field=models.FloatField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Puntuación'),
        ),
        migrations.AlterField(
            model_name='evaluation',
            name='overall_rating',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Calificación general'),
        ),
        
        # ===== ACTUALIZACIONES DE NOTIFICATIONS =====
        migrations.AddField(
            model_name='notification',
            name='related_url',
            field=models.CharField(blank=True, max_length=500, null=True, verbose_name='URL relacionada'),
        ),
        migrations.AddField(
            model_name='notification',
            name='type',
            field=models.CharField(choices=[('info', 'Información'), ('success', 'Éxito'), ('warning', 'Advertencia'), ('error', 'Error')], default='info', max_length=50, verbose_name='Tipo'),
        ),
        migrations.AddField(
            model_name='notification',
            name='read',
            field=models.BooleanField(default=False, verbose_name='Leída'),
        ),
        
        # ===== ACTUALIZACIONES DE STRIKES =====
        migrations.AddField(
            model_name='strike',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='strikes', to='projects.proyecto', verbose_name='Proyecto'),
        ),
        migrations.AddField(
            model_name='strike',
            name='description',
            field=models.TextField(blank=True, null=True, verbose_name='Descripción'),
        ),
        migrations.AddField(
            model_name='strike',
            name='expires_at',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Fecha de expiración'),
        ),
        
        # ===== ACTUALIZACIONES DE INTERVIEWS =====
        migrations.AddField(
            model_name='interview',
            name='application',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interviews', to='applications.aplicacion', verbose_name='Aplicación'),
        ),
        migrations.AddField(
            model_name='interview',
            name='interview_date',
            field=models.DateTimeField(verbose_name='Fecha de entrevista'),
        ),
        migrations.AddField(
            model_name='interview',
            name='duration_minutes',
            field=models.IntegerField(default=60, verbose_name='Duración en minutos'),
        ),
        migrations.AddField(
            model_name='interview',
            name='notes',
            field=models.TextField(blank=True, null=True, verbose_name='Notas'),
        ),
        migrations.AddField(
            model_name='interview',
            name='feedback',
            field=models.TextField(blank=True, null=True, verbose_name='Feedback'),
        ),
        migrations.AddField(
            model_name='interview',
            name='rating',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Calificación'),
        ),
        
        # ===== ACTUALIZACIONES DE APPLICATIONS =====
        migrations.AddField(
            model_name='aplicacion',
            name='cover_letter',
            field=models.TextField(blank=True, null=True, verbose_name='Carta de presentación'),
        ),
        migrations.AddField(
            model_name='aplicacion',
            name='company_notes',
            field=models.TextField(blank=True, null=True, verbose_name='Notas de la empresa'),
        ),
        migrations.AddField(
            model_name='aplicacion',
            name='student_notes',
            field=models.TextField(blank=True, null=True, verbose_name='Notas del estudiante'),
        ),
        migrations.AddField(
            model_name='aplicacion',
            name='portfolio_url',
            field=models.CharField(blank=True, max_length=500, null=True, verbose_name='URL del portafolio'),
        ),
        migrations.AddField(
            model_name='aplicacion',
            name='github_url',
            field=models.CharField(blank=True, max_length=500, null=True, verbose_name='URL de GitHub'),
        ),
        migrations.AddField(
            model_name='aplicacion',
            name='linkedin_url',
            field=models.CharField(blank=True, max_length=500, null=True, verbose_name='URL de LinkedIn'),
        ),
        migrations.AddField(
            model_name='aplicacion',
            name='applied_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Fecha de aplicación'),
        ),
        migrations.AddField(
            model_name='aplicacion',
            name='reviewed_at',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Fecha de revisión'),
        ),
        migrations.AddField(
            model_name='aplicacion',
            name='responded_at',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Fecha de respuesta'),
        ),
        
        # ===== ACTUALIZACIONES DE COMPANIES =====
        migrations.AddField(
            model_name='empresa',
            name='rut',
            field=models.CharField(blank=True, max_length=20, null=True, verbose_name='RUT'),
        ),
        migrations.AddField(
            model_name='empresa',
            name='personality',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Personalidad'),
        ),
        migrations.AddField(
            model_name='empresa',
            name='business_name',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Razón social'),
        ),
        migrations.AddField(
            model_name='empresa',
            name='company_address',
            field=models.CharField(blank=True, max_length=500, null=True, verbose_name='Dirección de la empresa'),
        ),
        migrations.AddField(
            model_name='empresa',
            name='company_phone',
            field=models.CharField(blank=True, max_length=20, null=True, verbose_name='Teléfono de la empresa'),
        ),
        migrations.AddField(
            model_name='empresa',
            name='company_email',
            field=models.EmailField(blank=True, null=True, verbose_name='Email de la empresa'),
        ),
        migrations.AddField(
            model_name='empresa',
            name='founded_year',
            field=models.IntegerField(blank=True, null=True, verbose_name='Año de fundación'),
        ),
        migrations.AddField(
            model_name='empresa',
            name='logo_url',
            field=models.CharField(blank=True, max_length=500, null=True, verbose_name='URL del logo'),
        ),
        
        # ===== ÍNDICES PARA OPTIMIZACIÓN =====
        migrations.AddIndex(
            model_name='calendarevent',
            index=models.Index(fields=['user', 'start_date'], name='calendar_events_user_start_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarevent',
            index=models.Index(fields=['event_type'], name='calendar_events_type_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarevent',
            index=models.Index(fields=['status'], name='calendar_events_status_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'read'], name='notifications_user_read_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['created_at'], name='notifications_created_idx'),
        ),
        migrations.AddIndex(
            model_name='strike',
            index=models.Index(fields=['student', 'is_active'], name='strikes_student_active_idx'),
        ),
        migrations.AddIndex(
            model_name='strike',
            index=models.Index(fields=['issued_at'], name='strikes_issued_idx'),
        ),
        migrations.AddIndex(
            model_name='evaluation',
            index=models.Index(fields=['student', 'status'], name='evaluations_student_status_idx'),
        ),
        migrations.AddIndex(
            model_name='evaluation',
            index=models.Index(fields=['project', 'type'], name='evaluations_project_type_idx'),
        ),
        migrations.AddIndex(
            model_name='aplicacion',
            index=models.Index(fields=['project', 'status'], name='applications_project_status_idx'),
        ),
        migrations.AddIndex(
            model_name='aplicacion',
            index=models.Index(fields=['student', 'status'], name='applications_student_status_idx'),
        ),
        migrations.AddIndex(
            model_name='proyecto',
            index=models.Index(fields=['company', 'status'], name='projects_company_status_idx'),
        ),
        migrations.AddIndex(
            model_name='proyecto',
            index=models.Index(fields=['area', 'status'], name='projects_area_status_idx'),
        ),
        migrations.AddIndex(
            model_name='estudiante',
            index=models.Index(fields=['status', 'api_level'], name='students_status_api_idx'),
        ),
        migrations.AddIndex(
            model_name='estudiante',
            index=models.Index(fields=['area', 'status'], name='students_area_status_idx'),
        ),
        migrations.AddIndex(
            model_name='empresa',
            index=models.Index(fields=['status', 'verified'], name='companies_status_verified_idx'),
        ),
        migrations.AddIndex(
            model_name='empresa',
            index=models.Index(fields=['industry', 'status'], name='companies_industry_status_idx'),
        ),
        
        # ===== CONSTRAINTS PARA INTEGRIDAD DE DATOS =====
        migrations.AddConstraint(
            model_name='evaluation',
            constraint=models.CheckConstraint(check=models.Q(('score__gte', 1), ('score__lte', 5)), name='evaluation_score_range'),
        ),
        migrations.AddConstraint(
            model_name='evaluation',
            constraint=models.CheckConstraint(check=models.Q(('overall_rating__gte', 1), ('overall_rating__lte', 5)), name='evaluation_overall_rating_range'),
        ),
        migrations.AddConstraint(
            model_name='interview',
            constraint=models.CheckConstraint(check=models.Q(('rating__gte', 1), ('rating__lte', 5)), name='interview_rating_range'),
        ),
        migrations.AddConstraint(
            model_name='estudiante',
            constraint=models.CheckConstraint(check=models.Q(('api_level__gte', 1), ('api_level__lte', 4)), name='student_api_level_range'),
        ),
        migrations.AddConstraint(
            model_name='estudiante',
            constraint=models.CheckConstraint(check=models.Q(('trl_level__gte', 1), ('trl_level__lte', 9)), name='student_trl_level_range'),
        ),
        migrations.AddConstraint(
            model_name='estudiante',
            constraint=models.CheckConstraint(check=models.Q(('strikes__gte', 0), ('strikes__lte', 10)), name='student_strikes_range'),
        ),
        migrations.AddConstraint(
            model_name='estudiante',
            constraint=models.CheckConstraint(check=models.Q(('gpa__gte', 0), ('gpa__lte', 5)), name='student_gpa_range'),
        ),
        migrations.AddConstraint(
            model_name='estudiante',
            constraint=models.CheckConstraint(check=models.Q(('rating__gte', 0), ('rating__lte', 5)), name='student_rating_range'),
        ),
        migrations.AddConstraint(
            model_name='estudiante',
            constraint=models.CheckConstraint(check=models.Q(('experience_years__gte', 0), ('experience_years__lte', 20)), name='student_experience_years_range'),
        ),
        migrations.AddConstraint(
            model_name='proyecto',
            constraint=models.CheckConstraint(check=models.Q(('min_api_level__gte', 1), ('min_api_level__lte', 4)), name='project_min_api_level_range'),
        ),
        migrations.AddConstraint(
            model_name='proyecto',
            constraint=models.CheckConstraint(check=models.Q(('api_level__gte', 1), ('api_level__lte', 4)), name='project_api_level_range'),
        ),
        migrations.AddConstraint(
            model_name='proyecto',
            constraint=models.CheckConstraint(check=models.Q(('required_hours__gte', 1)), name='project_required_hours_positive'),
        ),
        migrations.AddConstraint(
            model_name='proyecto',
            constraint=models.CheckConstraint(check=models.Q(('max_students__gte', 1)), name='project_max_students_positive'),
        ),
        migrations.AddConstraint(
            model_name='proyecto',
            constraint=models.CheckConstraint(check=models.Q(('current_students__gte', 0)), name='project_current_students_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='proyecto',
            constraint=models.CheckConstraint(check=models.Q(('duration_weeks__gte', 1)), name='project_duration_weeks_positive'),
        ),
        migrations.AddConstraint(
            model_name='proyecto',
            constraint=models.CheckConstraint(check=models.Q(('hours_per_week__gte', 1)), name='project_hours_per_week_positive'),
        ),
        migrations.AddConstraint(
            model_name='empresa',
            constraint=models.CheckConstraint(check=models.Q(('rating__gte', 0), ('rating__lte', 5)), name='company_rating_range'),
        ),
        migrations.AddConstraint(
            model_name='empresa',
            constraint=models.CheckConstraint(check=models.Q(('total_projects__gte', 0)), name='company_total_projects_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='empresa',
            constraint=models.CheckConstraint(check=models.Q(('projects_completed__gte', 0)), name='company_projects_completed_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='empresa',
            constraint=models.CheckConstraint(check=models.Q(('total_hours_offered__gte', 0)), name='company_total_hours_non_negative'),
        ),
        
        # ===== DATOS INICIALES ADICIONALES =====
        migrations.RunSQL(
            sql="""
            -- Insertar estados de proyecto por defecto si no existen
            INSERT INTO project_status_projectstatus (name, description, color, is_active, created_at, updated_at)
            SELECT 'Abierto', 'Proyecto abierto para aplicaciones', '#28a745', true, NOW(), NOW()
            WHERE NOT EXISTS (SELECT 1 FROM project_status_projectstatus WHERE name = 'Abierto');
            
            INSERT INTO project_status_projectstatus (name, description, color, is_active, created_at, updated_at)
            SELECT 'En Progreso', 'Proyecto en desarrollo', '#007bff', true, NOW(), NOW()
            WHERE NOT EXISTS (SELECT 1 FROM project_status_projectstatus WHERE name = 'En Progreso');
            
            INSERT INTO project_status_projectstatus (name, description, color, is_active, created_at, updated_at)
            SELECT 'Completado', 'Proyecto finalizado exitosamente', '#6c757d', true, NOW(), NOW()
            WHERE NOT EXISTS (SELECT 1 FROM project_status_projectstatus WHERE name = 'Completado');
            
            INSERT INTO project_status_projectstatus (name, description, color, is_active, created_at, updated_at)
            SELECT 'Cancelado', 'Proyecto cancelado', '#dc3545', true, NOW(), NOW()
            WHERE NOT EXISTS (SELECT 1 FROM project_status_projectstatus WHERE name = 'Cancelado');
            
            -- Insertar categorías de evaluación por defecto si no existen
            INSERT INTO evaluation_categories_evaluationcategory (name, description, weight, is_active, created_at, updated_at)
            SELECT 'Calidad del Trabajo', 'Evaluación de la calidad del trabajo realizado', 0.3, true, NOW(), NOW()
            WHERE NOT EXISTS (SELECT 1 FROM evaluation_categories_evaluationcategory WHERE name = 'Calidad del Trabajo');
            
            INSERT INTO evaluation_categories_evaluationcategory (name, description, weight, is_active, created_at, updated_at)
            SELECT 'Comunicación', 'Evaluación de las habilidades de comunicación', 0.2, true, NOW(), NOW()
            WHERE NOT EXISTS (SELECT 1 FROM evaluation_categories_evaluationcategory WHERE name = 'Comunicación');
            
            INSERT INTO evaluation_categories_evaluationcategory (name, description, weight, is_active, created_at, updated_at)
            SELECT 'Puntualidad', 'Evaluación de la puntualidad y cumplimiento de plazos', 0.2, true, NOW(), NOW()
            WHERE NOT EXISTS (SELECT 1 FROM evaluation_categories_evaluationcategory WHERE name = 'Puntualidad');
            
            INSERT INTO evaluation_categories_evaluationcategory (name, description, weight, is_active, created_at, updated_at)
            SELECT 'Trabajo en Equipo', 'Evaluación de las habilidades de trabajo en equipo', 0.15, true, NOW(), NOW()
            WHERE NOT EXISTS (SELECT 1 FROM evaluation_categories_evaluationcategory WHERE name = 'Trabajo en Equipo');
            
            INSERT INTO evaluation_categories_evaluationcategory (name, description, weight, is_active, created_at, updated_at)
            SELECT 'Iniciativa', 'Evaluación de la iniciativa y proactividad', 0.15, true, NOW(), NOW()
            WHERE NOT EXISTS (SELECT 1 FROM evaluation_categories_evaluationcategory WHERE name = 'Iniciativa');
            """,
            reverse_sql="""
            -- No hay operación de reversión para datos iniciales
            """
        ),
    ] 