# Generated by Django 4.2.7 on 2024-01-15 10:00:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        # ===== USUARIOS =====
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(default=uuid.uuid4, max_length=36, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('admin', 'Administrador'), ('student', 'Estudiante'), ('company', 'Empresa')], default='student', max_length=20)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('avatar', models.URLField(blank=True, max_length=500, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('position', models.CharField(blank=True, max_length=100, null=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('career', models.CharField(blank=True, max_length=100, null=True)),
                ('company_name', models.CharField(blank=True, max_length=200, null=True)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=20, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        
        # ===== ÁREAS =====
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nombre del área', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Descripción del área', null=True)),
                ('color', models.CharField(default='#007bff', help_text='Color hexadecimal del área', max_length=7)),
                ('icon', models.CharField(blank=True, help_text='Icono del área', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Área',
                'verbose_name_plural': 'Áreas',
                'db_table': 'areas',
                'ordering': ['name'],
            },
        ),
        
        # ===== NIVELES TRL =====
        migrations.CreateModel(
            name='TRLLevel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('level', models.IntegerField(help_text='Nivel TRL del 1 al 9', unique=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)])),
                ('name', models.CharField(help_text='Nombre del nivel TRL', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Descripción detallada del nivel', null=True)),
                ('min_hours', models.IntegerField(help_text='Horas mínimas requeridas para este nivel')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Nivel TRL',
                'verbose_name_plural': 'Niveles TRL',
                'db_table': 'trl_levels',
                'ordering': ['level'],
            },
        ),
        
        # ===== ESTADOS DE PROYECTO =====
        migrations.CreateModel(
            name='ProjectStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nombre del estado', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Descripción del estado', null=True)),
                ('color', models.CharField(default='#007bff', help_text='Color hexadecimal del estado', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Estado de Proyecto',
                'verbose_name_plural': 'Estados de Proyecto',
                'db_table': 'project_status',
                'ordering': ['name'],
            },
        ),
        
        # ===== CATEGORÍAS DE EVALUACIÓN =====
        migrations.CreateModel(
            name='EvaluationCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Categoría de Evaluación',
                'verbose_name_plural': 'Categorías de Evaluación',
                'ordering': ['name'],
            },
        ),
        
        # ===== EMPRESAS =====
        migrations.CreateModel(
            name='Empresa',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('industry', models.CharField(blank=True, max_length=100, null=True)),
                ('size', models.CharField(blank=True, choices=[('Pequeña', 'Pequeña'), ('Mediana', 'Mediana'), ('Grande', 'Grande'), ('Startup', 'Startup')], max_length=50, null=True)),
                ('website', models.CharField(blank=True, max_length=200, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('rut', models.CharField(blank=True, max_length=20, null=True)),
                ('personality', models.CharField(blank=True, max_length=50, null=True)),
                ('business_name', models.CharField(blank=True, max_length=200, null=True)),
                ('company_address', models.CharField(blank=True, max_length=500, null=True)),
                ('company_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('company_email', models.EmailField(blank=True, null=True)),
                ('founded_year', models.IntegerField(blank=True, null=True)),
                ('logo_url', models.CharField(blank=True, max_length=500, null=True)),
                ('verified', models.BooleanField(default=False)),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('total_projects', models.IntegerField(default=0)),
                ('projects_completed', models.IntegerField(default=0)),
                ('total_hours_offered', models.IntegerField(default=0)),
                ('technologies_used', models.JSONField(blank=True, null=True)),
                ('benefits_offered', models.JSONField(blank=True, null=True)),
                ('remote_work_policy', models.CharField(blank=True, choices=[('full-remote', 'Full Remote'), ('hybrid', 'Híbrido'), ('onsite', 'Presencial')], max_length=50, null=True)),
                ('internship_duration', models.CharField(blank=True, max_length=50, null=True)),
                ('stipend_range', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_email', models.EmailField(blank=True, null=True)),
                ('contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.CharField(choices=[('active', 'Activa'), ('inactive', 'Inactiva'), ('suspended', 'Suspendida')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='empresa_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Empresa',
                'verbose_name_plural': 'Empresas',
                'db_table': 'companies',
            },
        ),
        
        # ===== ESTUDIANTES =====
        migrations.CreateModel(
            name='Estudiante',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('career', models.CharField(blank=True, max_length=200, null=True)),
                ('semester', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('graduation_year', models.IntegerField(blank=True, null=True)),
                ('university', models.CharField(blank=True, max_length=200, null=True)),
                ('education_level', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('approved', 'Aprobado'), ('rejected', 'Rechazado'), ('suspended', 'Suspendido')], default='approved', max_length=20)),
                ('api_level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('trl_level', models.IntegerField(default=1, help_text='Nivel TRL del 1 al 9 según el estado del proyecto', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)])),
                ('strikes', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('gpa', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('completed_projects', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_hours', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('experience_years', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('portfolio_url', models.CharField(blank=True, max_length=500, null=True)),
                ('github_url', models.CharField(blank=True, max_length=500, null=True)),
                ('linkedin_url', models.CharField(blank=True, max_length=500, null=True)),
                ('cv_link', models.CharField(blank=True, max_length=500, null=True)),
                ('certificado_link', models.CharField(blank=True, max_length=500, null=True)),
                ('availability', models.CharField(choices=[('full-time', 'Tiempo Completo'), ('part-time', 'Tiempo Parcial'), ('flexible', 'Flexible')], default='flexible', max_length=20)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('area', models.CharField(blank=True, help_text='Área de interés del estudiante', max_length=200, null=True)),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('skills', models.JSONField(blank=True, null=True)),
                ('languages', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='estudiante_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Estudiante',
                'verbose_name_plural': 'Estudiantes',
                'db_table': 'students',
            },
        ),
        
        # ===== PROYECTOS =====
        migrations.CreateModel(
            name='Proyecto',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('requirements', models.TextField()),
                ('tipo', models.CharField(blank=True, help_text='Tipo de actividad del proyecto', max_length=100, null=True)),
                ('objetivo', models.TextField(blank=True, help_text='Objetivo del proyecto', null=True)),
                ('encargado', models.CharField(blank=True, help_text='Responsable del proyecto de la empresa', max_length=200, null=True)),
                ('contacto', models.CharField(blank=True, help_text='Contacto de la empresa', max_length=200, null=True)),
                ('api_level', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('required_hours', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('min_api_level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('max_students', models.IntegerField(default=1)),
                ('current_students', models.IntegerField(default=0)),
                ('duration_weeks', models.IntegerField(default=12)),
                ('hours_per_week', models.IntegerField(default=20)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('estimated_end_date', models.DateField(blank=True, null=True)),
                ('real_end_date', models.DateField(blank=True, null=True)),
                ('application_deadline', models.DateField(blank=True, null=True)),
                ('modality', models.CharField(choices=[('remote', 'Remoto'), ('onsite', 'Presencial'), ('hybrid', 'Híbrido')], default='remote', max_length=20)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('difficulty', models.CharField(choices=[('beginner', 'Principiante'), ('intermediate', 'Intermedio'), ('intermediate-advanced', 'Intermedio-Avanzado'), ('advanced', 'Avanzado')], default='intermediate', max_length=25)),
                ('required_skills', models.JSONField(blank=True, null=True)),
                ('preferred_skills', models.JSONField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, null=True)),
                ('technologies', models.JSONField(blank=True, null=True)),
                ('benefits', models.JSONField(blank=True, null=True)),
                ('applications_count', models.IntegerField(default=0)),
                ('views_count', models.IntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_urgent', models.BooleanField(default=False)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proyectos', to='areas.area')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proyectos', to='companies.empresa')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proyectos', to='project_status.projectstatus')),
                ('trl', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proyectos', to='trl_levels.trllevel')),
            ],
            options={
                'verbose_name': 'Proyecto',
                'verbose_name_plural': 'Proyectos',
                'db_table': 'projects',
                'ordering': ['-created_at'],
            },
        ),
        
        # ===== APLICACIONES =====
        migrations.CreateModel(
            name='Aplicacion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('reviewing', 'En Revisión'), ('interviewed', 'Entrevistado'), ('accepted', 'Aceptado'), ('rejected', 'Rechazado'), ('withdrawn', 'Retirado'), ('completed', 'Completado')], default='pending', max_length=20)),
                ('cover_letter', models.TextField(blank=True, null=True)),
                ('company_notes', models.TextField(blank=True, null=True)),
                ('student_notes', models.TextField(blank=True, null=True)),
                ('portfolio_url', models.CharField(blank=True, max_length=500, null=True)),
                ('github_url', models.CharField(blank=True, max_length=500, null=True)),
                ('linkedin_url', models.CharField(blank=True, max_length=500, null=True)),
                ('applied_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='application_project', to='projects.proyecto')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aplicaciones', to='students.estudiante')),
            ],
            options={
                'verbose_name': 'Aplicación',
                'verbose_name_plural': 'Aplicaciones',
                'db_table': 'applications',
                'ordering': ['-applied_at'],
                'unique_together': {('project', 'student')},
            },
        ),
        
        # ===== ASIGNACIONES =====
        migrations.CreateModel(
            name='Asignacion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('fecha_inicio', models.DateField()),
                ('fecha_fin', models.DateField(blank=True, null=True)),
                ('tareas', models.TextField(blank=True, null=True)),
                ('estado', models.CharField(choices=[('en curso', 'En Curso'), ('completado', 'Completado'), ('cancelado', 'Cancelado')], default='en curso', max_length=20)),
                ('hours_worked', models.IntegerField(default=0)),
                ('tasks_completed', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='asignacion', to='applications.aplicacion')),
            ],
            options={
                'verbose_name': 'Asignación',
                'verbose_name_plural': 'Asignaciones',
                'db_table': 'application_assignments',
            },
        ),
        
        # ===== HORAS TRABAJADAS =====
        migrations.CreateModel(
            name='WorkHour',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('hours_worked', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('approved', models.BooleanField(default=False)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('fecha', models.DateField()),
                ('horas_trabajadas', models.IntegerField()),
                ('descripcion', models.TextField(blank=True, null=True)),
                ('estado_validacion', models.CharField(default='pendiente', max_length=20)),
                ('fecha_validacion', models.DateTimeField(blank=True, null=True)),
                ('comentario_validacion', models.TextField(blank=True, null=True)),
                ('is_project_completion', models.BooleanField(default=False, help_text='Horas generadas automáticamente al completar un proyecto')),
                ('integrantes_snapshot', models.JSONField(blank=True, help_text='Lista de integrantes del proyecto al momento de validar', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='horas_aprobadas', to=settings.AUTH_USER_MODEL)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_hours', to='applications.asignacion')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_hours', to='companies.empresa')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_hours', to='projects.proyecto')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_hours', to='students.estudiante')),
                ('validador', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='horas_validadas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Hora Trabajada',
                'verbose_name_plural': 'Horas Trabajadas',
                'db_table': 'work_hours',
                'ordering': ['-fecha'],
            },
        ),
        
        # ===== EVALUACIONES =====
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('score', models.FloatField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comments', models.TextField(blank=True, null=True)),
                ('evaluation_date', models.DateField(auto_now_add=True)),
                ('evaluator_role', models.CharField(blank=True, max_length=100, null=True)),
                ('date', models.DateField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('completed', 'Completada'), ('flagged', 'Marcada')], default='pending', max_length=20)),
                ('type', models.CharField(choices=[('intermediate', 'Intermedia'), ('final', 'Final')], default='final', max_length=20)),
                ('overall_rating', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('strengths', models.TextField(blank=True, help_text='Fortalezas (separadas por coma)', null=True)),
                ('areas_for_improvement', models.TextField(blank=True, help_text='Áreas de mejora (separadas por coma)', null=True)),
                ('project_duration', models.CharField(blank=True, max_length=50, null=True)),
                ('technologies', models.CharField(blank=True, max_length=200, null=True)),
                ('deliverables', models.CharField(blank=True, max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='evaluation_categories.evaluationcategory')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='companies.empresa')),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations_done', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='projects.proyecto')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations_received', to='students.estudiante')),
            ],
            options={
                'verbose_name': 'Evaluación',
                'verbose_name_plural': 'Evaluaciones',
                'ordering': ['-date', '-created_at'],
            },
        ),
        
        # ===== NOTIFICACIONES =====
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('type', models.CharField(choices=[('info', 'Información'), ('success', 'Éxito'), ('warning', 'Advertencia'), ('error', 'Error')], default='info', max_length=50)),
                ('read', models.BooleanField(default=False)),
                ('related_url', models.CharField(blank=True, max_length=500, null=True)),
                ('notification_type', models.CharField(choices=[('info', 'Información'), ('success', 'Éxito'), ('warning', 'Advertencia'), ('error', 'Error')], default='info', max_length=50)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('action_url', models.CharField(blank=True, max_length=500, null=True)),
                ('priority', models.CharField(choices=[('low', 'Baja'), ('normal', 'Normal'), ('medium', 'Media'), ('high', 'Alta'), ('urgent', 'Urgente')], default='normal', max_length=20)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notificación',
                'verbose_name_plural': 'Notificaciones',
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        
        # ===== ENTREVISTAS =====
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('interview_date', models.DateTimeField()),
                ('duration_minutes', models.IntegerField(default=60)),
                ('status', models.CharField(choices=[('scheduled', 'Programada'), ('completed', 'Completada'), ('cancelled', 'Cancelada'), ('no-show', 'No se presentó')], default='scheduled', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('interview_type', models.CharField(choices=[('technical', 'Técnica'), ('behavioral', 'Comportamental'), ('video', 'Video'), ('phone', 'Teléfono'), ('onsite', 'Presencial')], default='video', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interviews', to='applications.aplicacion')),
                ('interviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interviews_conducted', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Entrevista',
                'verbose_name_plural': 'Entrevistas',
                'db_table': 'interviews',
                'ordering': ['-interview_date'],
            },
        ),
        
        # ===== EVENTOS DE CALENDARIO =====
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('event_type', models.CharField(choices=[('meeting', 'Reunión'), ('deadline', 'Fecha Límite'), ('reminder', 'Recordatorio'), ('interview', 'Entrevista'), ('other', 'Otro')], default='other', max_length=50)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('all_day', models.BooleanField(default=False)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('priority', models.CharField(choices=[('low', 'Baja'), ('normal', 'Normal'), ('medium', 'Media'), ('high', 'Alta'), ('urgent', 'Urgente')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('scheduled', 'Programado'), ('in_progress', 'En Progreso'), ('completed', 'Completado'), ('cancelled', 'Cancelado'), ('postponed', 'Pospuesto')], default='scheduled', max_length=20)),
                ('is_all_day', models.BooleanField(default=False)),
                ('is_online', models.BooleanField(default=False)),
                ('meeting_url', models.URLField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=False)),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurrence_rule', models.TextField(default='{}')),
                ('reminder_minutes', models.PositiveIntegerField(default=15)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('color', models.CharField(default='#1976d2', max_length=7)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attendees', models.ManyToManyField(blank=True, related_name='attended_events', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_events', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to='projects.proyecto')),
                ('related_application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to='applications.aplicacion')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Evento de Calendario',
                'verbose_name_plural': 'Eventos de Calendario',
                'db_table': 'calendar_events',
                'ordering': ['-start_date'],
            },
        ),
        
        # ===== STRIKES =====
        migrations.CreateModel(
            name='Strike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.TextField(verbose_name='Motivo de la Amonestación')),
                ('description', models.TextField(blank=True, null=True)),
                ('severity', models.CharField(choices=[('low', 'Bajo'), ('medium', 'Medio'), ('high', 'Alto')], default='medium', max_length=20)),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issued_strikes', to='companies.empresa', verbose_name='Empresa Emisora')),
                ('issued_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='strikes_issued', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='strikes', to='projects.proyecto')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strike_records', to='students.estudiante', verbose_name='Estudiante')),
            ],
            options={
                'verbose_name': 'Amonestación (Strike)',
                'verbose_name_plural': 'Amonestaciones (Strikes)',
                'db_table': 'strikes',
                'ordering': ['-issued_at'],
            },
        ),
        
        # ===== REPORTES DE STRIKES =====
        migrations.CreateModel(
            name='StrikeReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.CharField(max_length=200, verbose_name='Motivo del Strike')),
                ('description', models.TextField(verbose_name='Descripción Detallada')),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('approved', 'Aprobado'), ('rejected', 'Rechazado')], default='pending', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('admin_notes', models.TextField(blank=True, null=True, verbose_name='Notas del Administrador')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strike_reports', to='companies.empresa', verbose_name='Empresa')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strike_reports', to='projects.proyecto', verbose_name='Proyecto')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='strike_reports_reviewed', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strike_reports', to='students.estudiante', verbose_name='Estudiante')),
            ],
            options={
                'verbose_name': 'Reporte de Strike',
                'verbose_name_plural': 'Reportes de Strikes',
                'db_table': 'strike_reports',
                'ordering': ['-created_at'],
            },
        ),
        
        # ===== CÓDIGOS DE RESETEO DE CONTRASEÑA =====
        migrations.CreateModel(
            name='PasswordResetCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_codes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        
        # ===== ÍNDICES PARA OPTIMIZACIÓN =====
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='users_role_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='users_active_idx'),
        ),
        
        migrations.AddIndex(
            model_name='proyecto',
            index=models.Index(fields=['status'], name='projects_status_idx'),
        ),
        migrations.AddIndex(
            model_name='proyecto',
            index=models.Index(fields=['company'], name='projects_company_idx'),
        ),
        migrations.AddIndex(
            model_name='proyecto',
            index=models.Index(fields=['area'], name='projects_area_idx'),
        ),
        migrations.AddIndex(
            model_name='proyecto',
            index=models.Index(fields=['created_at'], name='projects_created_idx'),
        ),
        migrations.AddIndex(
            model_name='proyecto',
            index=models.Index(fields=['is_featured'], name='projects_featured_idx'),
        ),
        
        migrations.AddIndex(
            model_name='aplicacion',
            index=models.Index(fields=['status'], name='applications_status_idx'),
        ),
        migrations.AddIndex(
            model_name='aplicacion',
            index=models.Index(fields=['project'], name='applications_project_idx'),
        ),
        migrations.AddIndex(
            model_name='aplicacion',
            index=models.Index(fields=['student'], name='applications_student_idx'),
        ),
        migrations.AddIndex(
            model_name='aplicacion',
            index=models.Index(fields=['applied_at'], name='applications_applied_idx'),
        ),
        
        migrations.AddIndex(
            model_name='workhour',
            index=models.Index(fields=['student'], name='work_hours_student_idx'),
        ),
        migrations.AddIndex(
            model_name='workhour',
            index=models.Index(fields=['project'], name='work_hours_project_idx'),
        ),
        migrations.AddIndex(
            model_name='workhour',
            index=models.Index(fields=['date'], name='work_hours_date_idx'),
        ),
        migrations.AddIndex(
            model_name='workhour',
            index=models.Index(fields=['approved'], name='work_hours_approved_idx'),
        ),
        
        migrations.AddIndex(
            model_name='evaluation',
            index=models.Index(fields=['student'], name='evaluations_student_idx'),
        ),
        migrations.AddIndex(
            model_name='evaluation',
            index=models.Index(fields=['project'], name='evaluations_project_idx'),
        ),
        migrations.AddIndex(
            model_name='evaluation',
            index=models.Index(fields=['evaluator'], name='evaluations_evaluator_idx'),
        ),
        migrations.AddIndex(
            model_name='evaluation',
            index=models.Index(fields=['status'], name='evaluations_status_idx'),
        ),
        
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user'], name='notifications_user_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['read'], name='notifications_read_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['created_at'], name='notifications_created_idx'),
        ),
        
        migrations.AddIndex(
            model_name='calendarevent',
            index=models.Index(fields=['user', 'start_date'], name='calendar_user_start_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarevent',
            index=models.Index(fields=['event_type'], name='calendar_event_type_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarevent',
            index=models.Index(fields=['status'], name='calendar_status_idx'),
        ),
        
        migrations.AddIndex(
            model_name='strike',
            index=models.Index(fields=['student'], name='strikes_student_idx'),
        ),
        migrations.AddIndex(
            model_name='strike',
            index=models.Index(fields=['is_active'], name='strikes_active_idx'),
        ),
        migrations.AddIndex(
            model_name='strike',
            index=models.Index(fields=['issued_at'], name='strikes_issued_idx'),
        ),
    ] 