# Generated by Django 4.2.7 on 2024-01-15 10:00:00

from django.db import migrations


def create_initial_data(apps, schema_editor):
    """Crea datos iniciales para el sistema"""
    
    # Crear áreas de conocimiento
    Area = apps.get_model('areas', 'Area')
    areas_data = [
        {'name': 'Tecnología', 'description': 'Proyectos relacionados con desarrollo de software, sistemas y tecnología', 'color': '#007bff', 'icon': 'fas fa-laptop-code'},
        {'name': 'Marketing', 'description': 'Proyectos de marketing digital, publicidad y comunicación', 'color': '#28a745', 'icon': 'fas fa-bullhorn'},
        {'name': 'Diseño', 'description': 'Proyectos de diseño gráfico, UX/UI y creatividad', 'color': '#ffc107', 'icon': 'fas fa-palette'},
        {'name': 'Negocios', 'description': 'Proyectos de administración, finanzas y estrategia empresarial', 'color': '#17a2b8', 'icon': 'fas fa-chart-line'},
        {'name': 'Investigación', 'description': 'Proyectos de investigación científica y académica', 'color': '#6f42c1', 'icon': 'fas fa-microscope'},
        {'name': 'Educación', 'description': 'Proyectos educativos y de formación', 'color': '#fd7e14', 'icon': 'fas fa-graduation-cap'},
        {'name': 'Salud', 'description': 'Proyectos relacionados con salud y bienestar', 'color': '#e83e8c', 'icon': 'fas fa-heartbeat'},
        {'name': 'Medio Ambiente', 'description': 'Proyectos de sostenibilidad y medio ambiente', 'color': '#20c997', 'icon': 'fas fa-leaf'},
        {'name': 'Arte y Cultura', 'description': 'Proyectos artísticos y culturales', 'color': '#dc3545', 'icon': 'fas fa-theater-masks'},
        {'name': 'Otros', 'description': 'Otros tipos de proyectos', 'color': '#6c757d', 'icon': 'fas fa-ellipsis-h'},
    ]
    
    for area_data in areas_data:
        Area.objects.get_or_create(
            name=area_data['name'],
            defaults=area_data
        )
    
    # Crear niveles TRL
    TRLLevel = apps.get_model('trl_levels', 'TRLLevel')
    trl_data = [
        {'level': 1, 'name': 'Principios básicos observados y reportados', 'description': 'Investigación científica básica que conduce a la investigación aplicada', 'min_hours': 20},
        {'level': 2, 'name': 'Concepto tecnológico y/o aplicación formulada', 'description': 'Investigación aplicada que conduce a la validación de concepto', 'min_hours': 40},
        {'level': 3, 'name': 'Prueba de concepto analítica y experimental', 'description': 'Validación de concepto mediante análisis y experimentación', 'min_hours': 60},
        {'level': 4, 'name': 'Validación de componente y/o sistema de laboratorio', 'description': 'Validación en entorno de laboratorio', 'min_hours': 80},
        {'level': 5, 'name': 'Validación de componente y/o sistema en entorno relevante', 'description': 'Validación en entorno relevante', 'min_hours': 100},
        {'level': 6, 'name': 'Demostración de sistema/subsistema o prototipo en entorno relevante', 'description': 'Demostración de prototipo en entorno relevante', 'min_hours': 120},
        {'level': 7, 'name': 'Demostración de prototipo de sistema en entorno operacional', 'description': 'Demostración de prototipo en entorno operacional', 'min_hours': 140},
        {'level': 8, 'name': 'Sistema completo y calificado a través de pruebas y demostración', 'description': 'Sistema completo calificado mediante pruebas', 'min_hours': 160},
        {'level': 9, 'name': 'Sistema probado a través de operaciones exitosas', 'description': 'Sistema probado en operaciones reales', 'min_hours': 180},
    ]
    
    for trl_data_item in trl_data:
        TRLLevel.objects.get_or_create(
            level=trl_data_item['level'],
            defaults=trl_data_item
        )
    
    # Crear estados de proyecto
    ProjectStatus = apps.get_model('project_status', 'ProjectStatus')
    status_data = [
        {'name': 'Borrador', 'description': 'Proyecto en fase de borrador', 'color': '#6c757d'},
        {'name': 'Abierto', 'description': 'Proyecto abierto para aplicaciones', 'color': '#28a745'},
        {'name': 'En Revisión', 'description': 'Proyecto en proceso de revisión', 'color': '#ffc107'},
        {'name': 'En Progreso', 'description': 'Proyecto en ejecución', 'color': '#007bff'},
        {'name': 'Pausado', 'description': 'Proyecto temporalmente pausado', 'color': '#fd7e14'},
        {'name': 'Completado', 'description': 'Proyecto finalizado exitosamente', 'color': '#20c997'},
        {'name': 'Cancelado', 'description': 'Proyecto cancelado', 'color': '#dc3545'},
    ]
    
    for status_data_item in status_data:
        ProjectStatus.objects.get_or_create(
            name=status_data_item['name'],
            defaults=status_data_item
        )
    
    # Crear categorías de evaluación
    EvaluationCategory = apps.get_model('evaluation_categories', 'EvaluationCategory')
    category_data = [
        {'name': 'Habilidades Técnicas', 'description': 'Evaluación de competencias técnicas y conocimientos específicos'},
        {'name': 'Habilidades Blandas', 'description': 'Evaluación de comunicación, trabajo en equipo y liderazgo'},
        {'name': 'Calidad del Trabajo', 'description': 'Evaluación de la calidad y precisión del trabajo realizado'},
        {'name': 'Cumplimiento de Plazos', 'description': 'Evaluación de la puntualidad y cumplimiento de fechas'},
        {'name': 'Iniciativa y Proactividad', 'description': 'Evaluación de la iniciativa y capacidad de resolver problemas'},
        {'name': 'Aprendizaje y Adaptabilidad', 'description': 'Evaluación de la capacidad de aprendizaje y adaptación'},
        {'name': 'Comunicación', 'description': 'Evaluación de la comunicación efectiva'},
        {'name': 'Responsabilidad', 'description': 'Evaluación de la responsabilidad y compromiso'},
    ]
    
    for category_data_item in category_data:
        EvaluationCategory.objects.get_or_create(
            name=category_data_item['name'],
            defaults=category_data_item
        )


def reverse_initial_data(apps, schema_editor):
    """Revierte la creación de datos iniciales"""
    
    Area = apps.get_model('areas', 'Area')
    Area.objects.all().delete()
    
    TRLLevel = apps.get_model('trl_levels', 'TRLLevel')
    TRLLevel.objects.all().delete()
    
    ProjectStatus = apps.get_model('project_status', 'ProjectStatus')
    ProjectStatus.objects.all().delete()
    
    EvaluationCategory = apps.get_model('evaluation_categories', 'EvaluationCategory')
    EvaluationCategory.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0002_migrate_json_fields'),
    ]

    operations = [
        migrations.RunPython(create_initial_data, reverse_initial_data),
    ] 