# Generated by Django 4.2.7 on 2024-01-15 10:00:00

import json
from django.db import migrations


def migrate_json_fields(apps, schema_editor):
    """Migra campos JSON de TextField a JSONField"""
    
    # Migrar empresas
    Empresa = apps.get_model('companies', 'Empresa')
    for empresa in Empresa.objects.all():
        # Migrar technologies_used
        if empresa.technologies_used and isinstance(empresa.technologies_used, str):
            try:
                technologies = json.loads(empresa.technologies_used)
                empresa.technologies_used = technologies
            except (json.JSONDecodeError, TypeError):
                empresa.technologies_used = []
        
        # Migrar benefits_offered
        if empresa.benefits_offered and isinstance(empresa.benefits_offered, str):
            try:
                benefits = json.loads(empresa.benefits_offered)
                empresa.benefits_offered = benefits
            except (json.JSONDecodeError, TypeError):
                empresa.benefits_offered = []
        
        empresa.save()
    
    # Migrar estudiantes
    Estudiante = apps.get_model('students', 'Estudiante')
    for estudiante in Estudiante.objects.all():
        # Migrar skills
        if estudiante.skills and isinstance(estudiante.skills, str):
            try:
                skills = json.loads(estudiante.skills)
                estudiante.skills = skills
            except (json.JSONDecodeError, TypeError):
                estudiante.skills = []
        
        # Migrar languages
        if estudiante.languages and isinstance(estudiante.languages, str):
            try:
                languages = json.loads(estudiante.languages)
                estudiante.languages = languages
            except (json.JSONDecodeError, TypeError):
                estudiante.languages = []
        
        estudiante.save()
    
    # Migrar proyectos
    Proyecto = apps.get_model('projects', 'Proyecto')
    for proyecto in Proyecto.objects.all():
        # Migrar required_skills
        if proyecto.required_skills and isinstance(proyecto.required_skills, str):
            try:
                skills = json.loads(proyecto.required_skills)
                proyecto.required_skills = skills
            except (json.JSONDecodeError, TypeError):
                proyecto.required_skills = []
        
        # Migrar preferred_skills
        if proyecto.preferred_skills and isinstance(proyecto.preferred_skills, str):
            try:
                skills = json.loads(proyecto.preferred_skills)
                proyecto.preferred_skills = skills
            except (json.JSONDecodeError, TypeError):
                proyecto.preferred_skills = []
        
        # Migrar tags
        if proyecto.tags and isinstance(proyecto.tags, str):
            try:
                tags = json.loads(proyecto.tags)
                proyecto.tags = tags
            except (json.JSONDecodeError, TypeError):
                proyecto.tags = []
        
        # Migrar technologies
        if proyecto.technologies and isinstance(proyecto.technologies, str):
            try:
                technologies = json.loads(proyecto.technologies)
                proyecto.technologies = technologies
            except (json.JSONDecodeError, TypeError):
                proyecto.technologies = []
        
        # Migrar benefits
        if proyecto.benefits and isinstance(proyecto.benefits, str):
            try:
                benefits = json.loads(proyecto.benefits)
                proyecto.benefits = benefits
            except (json.JSONDecodeError, TypeError):
                proyecto.benefits = []
        
        proyecto.save()


def reverse_migrate_json_fields(apps, schema_editor):
    """Revierte la migraci√≥n de campos JSON"""
    
    # Revertir empresas
    Empresa = apps.get_model('companies', 'Empresa')
    for empresa in Empresa.objects.all():
        if isinstance(empresa.technologies_used, list):
            empresa.technologies_used = json.dumps(empresa.technologies_used)
        if isinstance(empresa.benefits_offered, list):
            empresa.benefits_offered = json.dumps(empresa.benefits_offered)
        empresa.save()
    
    # Revertir estudiantes
    Estudiante = apps.get_model('students', 'Estudiante')
    for estudiante in Estudiante.objects.all():
        if isinstance(estudiante.skills, list):
            estudiante.skills = json.dumps(estudiante.skills)
        if isinstance(estudiante.languages, list):
            estudiante.languages = json.dumps(estudiante.languages)
        estudiante.save()
    
    # Revertir proyectos
    Proyecto = apps.get_model('projects', 'Proyecto')
    for proyecto in Proyecto.objects.all():
        if isinstance(proyecto.required_skills, list):
            proyecto.required_skills = json.dumps(proyecto.required_skills)
        if isinstance(proyecto.preferred_skills, list):
            proyecto.preferred_skills = json.dumps(proyecto.preferred_skills)
        if isinstance(proyecto.tags, list):
            proyecto.tags = json.dumps(proyecto.tags)
        if isinstance(proyecto.technologies, list):
            proyecto.technologies = json.dumps(proyecto.technologies)
        if isinstance(proyecto.benefits, list):
            proyecto.benefits = json.dumps(proyecto.benefits)
        proyecto.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial_restructured'),
    ]

    operations = [
        migrations.RunPython(migrate_json_fields, reverse_migrate_json_fields),
    ] 