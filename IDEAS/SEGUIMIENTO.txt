=== MAPA DE FRAGILIDAD DEL SISTEMA DE CALENDARIO ===
Fecha: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

üö® PROBLEMA IDENTIFICADO: Estados duplicados en la base de datos
- ID 1: 'published' (min√∫scula)
- ID 6: 'Publicado' (may√∫scula)  
- ID 2: 'active' (min√∫scula)
- ID 7: 'Activo' (may√∫scula)

=== PUNTOS CR√çTICOS DE FRAGILIDAD ===

1. COMPARACIONES DE ESTADO INCONSISTENTES
   ‚ùå Backend: project_status in ['active', 'activo'] 
   ‚ùå Frontend: selectedProjectData.status === 'active'
   üí• PROBLEMA: Si el backend devuelve 'Activo' o 'Publicado', el frontend no lo reconoce

2. DEPENDENCIA DE CAMPOS ESPEC√çFICOS
   ‚ùå Frontend espera: id, nombre, email, status, type
   ‚ùå Si el backend cambia la estructura, se rompe todo
   üí• PROBLEMA: No hay validaci√≥n de campos requeridos

3. L√ìGICA DE FALLBACK FR√ÅGIL
   ‚ùå Si projectStudents est√° vac√≠o, busca en users
   ‚ùå users tiene estructura completamente diferente
   üí• PROBLEMA: Fallback puede devolver datos incompatibles

4. MANEJO DE ERRORES INEXISTENTE
   ‚ùå No hay validaci√≥n de que selectedProjectData sea v√°lido
   ‚ùå Si es null/undefined, se rompe todo
   üí• PROBLEMA: Sistema no es resiliente a errores

5. DUPLICACI√ìN DE ESTADOS EN BD
   ‚ùå Estados duplicados con diferentes casos
   ‚ùå L√≥gica de comparaci√≥n inconsistente
   üí• PROBLEMA: Mismo estado puede tener diferentes representaciones

=== ESTRUCTURA ACTUAL FUNCIONANDO ===

BACKEND (projects/views.py - company_projects):
- Proyectos 'active'/'Activo': Solo estudiantes asignados (status: accepted, active, completed)
- Proyectos 'published'/'Publicado': Todos los postulantes
- Campo 'type': 'assigned' o 'applied'

FRONTEND (Calendar.tsx):
- projectStudents: Lista de estudiantes del proyecto (viene del backend)
- users: Lista de aplicaciones recibidas (fallback)
- L√≥gica de filtrado basada en selectedProjectData.status

=== REGLAS DE NEGOCIO CR√çTICAS ===

1. PROYECTOS ACTIVOS: Solo estudiantes asignados
2. PROYECTOS PUBLICADOS: Solo estudiantes que postularon  
3. El campo 'type' diferencia tipos de estudiantes
4. Los estados de proyecto son case-insensitive (pero inconsistente)

=== DEPENDENCIAS CR√çTICAS ===

- /api/projects/company_projects/ (projectStudents)
- /api/applications/received_applications/ (users - fallback)
- Estructura exacta de datos entre frontend y backend
- Nombres de estados de proyecto

=== AN√ÅLISIS COMPLETO REALIZADO ===

‚úÖ CONTRATO DE DATOS CREADO: IDEAS/CONTRATO_DATOS_CALENDARIO.md
‚úÖ ESTRUCTURA DE ENDPOINTS DOCUMENTADA
‚úÖ VARIABLES CR√çTICAS IDENTIFICADAS
‚úÖ COMPARACIONES DE ESTADO MAPEADAS
‚úÖ PROBLEMAS ESPEC√çFICOS IDENTIFICADOS
‚úÖ AN√ÅLISIS DE IMPACTO COMPLETADO: IDEAS/ANALISIS_IMPACTO_CAMBIO_ESTADOS.md

=== PROBLEMAS CR√çTICOS IDENTIFICADOS ===

1. **INCONSISTENCIA DE ESTADOS**
   - Backend compara con ['active', 'activo'] y ['published', 'publicado']
   - Frontend compara con === 'active' y === 'published'
   - Base de datos tiene estados duplicados con diferentes casos

2. **ESTRUCTURA DE DATOS DIFERENTE**
   - projectStudents: Campos `id`, `nombre`, `email`, `status`, `type`
   - users: Campos `id`, `project`, `student.name`, `student.email`, `status`

3. **L√ìGICA DE FALLBACK FR√ÅGIL**
   - Si projectStudents est√° vac√≠o, busca en users
   - Estructuras incompatibles pueden causar errores

=== AN√ÅLISIS DE IMPACTO DEL CAMBIO A INGL√âS ===

üö® **IMPACTO ALTO - REQUIERE MIGRACI√ìN INMEDIATA:**

1. **Dashboard de Estudiantes** (AvailableProjects.tsx)
   - L√≠nea 740: `project.status === 'Activo'` ‚Üí `'active'`

2. **Dashboard de Admin** (GestionProyectosAdmin.tsx)
   - L√≠neas 885-890: Estados mixtos espa√±ol/ingl√©s
   - L√≠neas 996-997: `'completado'` vs `'completed'`
   - L√≠neas 1051-1057: M√∫ltiples estados en espa√±ol

‚ö†Ô∏è **IMPACTO MEDIO - REQUIERE REVISI√ìN:**

3. **Backend - M√∫ltiples Views**
   - projects/views.py: Filtros con estados mixtos
   - core/views.py: M√∫ltiples filtros por status__name
   - evaluations/views.py: Comparaciones con 'Completado'

üîç **IMPACTO BAJO - SOLO REVISI√ìN:**

4. **Otros archivos frontend** con filtros por status
5. **Funcionalidades existentes** que ya usan ingl√©s

=== PLAN DE ROBUSTEZ (SIN ROMPER LO QUE FUNCIONA) ===

FASE 1: ‚úÖ COMPLETADA - Documentaci√≥n y An√°lisis
- [x] Mapear exactamente qu√© datos devuelve cada endpoint
- [x] Documentar la estructura de datos esperada
- [x] Identificar todas las comparaciones de estado
- [x] Analizar impacto del cambio a ingl√©s

FASE 2: Normalizaci√≥n de Datos
- [ ] Normalizar estados a min√∫sculas en el backend
- [ ] Crear constantes para estados v√°lidos
- [ ] Implementar validaci√≥n de datos
- [ ] **NUEVO**: Plan de migraci√≥n gradual a ingl√©s

FASE 3: Manejo de Errores
- [ ] Agregar try-catch en puntos cr√≠ticos
- [ ] Implementar fallbacks robustos
- [ ] Validaci√≥n de campos requeridos

FASE 4: Tests Seguros
- [ ] Tests de integraci√≥n (no unitarios)
- [ ] Mocks que respeten la estructura real
- [ ] Validaci√≥n de contratos de datos

=== PLAN DE MIGRACI√ìN A INGL√âS ===

**ESTRATEGIA**: Backend devuelve ingl√©s, Frontend muestra espa√±ol

**FASE 1: PREPARACI√ìN (SIN ROMPER NADA)**
1. Crear estados en ingl√©s en la base de datos
2. Mantener estados duplicados temporalmente
3. Implementar funci√≥n de traducci√≥n en frontend

**FASE 2: MIGRACI√ìN GRADUAL**
1. Actualizar backend para devolver solo estados en ingl√©s
2. Actualizar frontend para usar solo estados en ingl√©s
3. Mantener compatibilidad con estados existentes

**FASE 3: LIMPIEZA**
1. Migrar proyectos a nuevos estados
2. Eliminar estados duplicados solo al final
3. Validar que todo funcione

=== SOLUCIONES RECOMENDADAS ===

1. **Normalizaci√≥n de Estados**
   - Backend: project_status = project.status.name.lower()
   - Frontend: const normalizedStatus = selectedProjectData.status?.toLowerCase();

2. **Validaci√≥n de Campos**
   - Crear interfaces TypeScript para validar estructura
   - Validar antes de procesar datos

3. **Fallback Robusto**
   - Transformar datos del fallback a estructura compatible
   - Validar que la transformaci√≥n sea exitosa

4. **Funci√≥n de Traducci√≥n**
   - Implementar getProjectStatusLabel() en frontend
   - Mapear estados en ingl√©s a etiquetas en espa√±ol

=== ADVERTENCIAS CR√çTICAS ===

‚ö†Ô∏è NO MODIFICAR NADA hasta completar la documentaci√≥n
‚ö†Ô∏è NO CREAR TESTS que puedan romper la funcionalidad
‚ö†Ô∏è NO CAMBIAR la estructura de datos sin validar
‚ö†Ô∏è NO ELIMINAR estados duplicados sin migraci√≥n
‚ö†Ô∏è **NUEVO**: El cambio a ingl√©s afecta M√öLTIPLES interfaces

=== PR√ìXIMOS PASOS ===

1. ‚úÖ COMPLETADO: Documentar exactamente qu√© devuelve cada endpoint
2. ‚úÖ COMPLETADO: Crear contrato de datos entre frontend y backend
3. ‚úÖ COMPLETADO: Identificar todos los puntos de comparaci√≥n de estado
4. ‚úÖ COMPLETADO: Analizar impacto del cambio a ingl√©s
5. üîÑ EN PROGRESO: Planear migraci√≥n gradual sin romper funcionalidad

=== ARCHIVOS CR√çTICOS IDENTIFICADOS ===

**PRIORIDAD ALTA (Migraci√≥n inmediata):**
- `Frontend/src/pages/Dashboard/Student/Projects/AvailableProjects.tsx` - L√≠nea 740
- `Frontend/src/pages/Dashboard/Admin/GestionProyectosAdmin.tsx` - L√≠neas 885-890, 996-997, 1051-1057
- `Backend/projects/views.py` - L√≠neas 46, 1119

**PRIORIDAD MEDIA (Revisi√≥n):**
- `Backend/core/views.py` - M√∫ltiples filtros por status__name
- `Backend/evaluations/views.py` - Comparaciones con 'Completado'

**PRIORIDAD BAJA (Solo revisi√≥n):**
- Archivos que ya usan estados en ingl√©s
- Nuevas funcionalidades

**DOCUMENTACI√ìN:**
- `IDEAS/CONTRATO_DATOS_CALENDARIO.md` - Contrato de datos completo
- `IDEAS/ANALISIS_IMPACTO_CAMBIO_ESTADOS.md` - An√°lisis de impacto detallado
